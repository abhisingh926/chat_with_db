
project_additionalprojectpurchaseorder:
  description: This table store the data about the inroof project ,The 'project_additionalprojectpurchaseorder' table is designed to store
    information related to additional purchase orders associated with specific projects.
    It captures details such as the project identifier, purchase order numbers, supplier
    information, order dates, quantities, and costs, allowing
  fields:
    id:
      type: bigint
      description: The field 'id' in the 'project_additionalprojectpurchaseorder'
        table is a unique identifier of type 'bigint'. It is used to uniquely distinguish
        each record in the table.
    created_at:
      type: datetime(6)
      description: The field 'created_at' in the 'project_additionalprojectpurchaseorder'
        table represents the timestamp when the record was created. It stores date
        and time information with a precision of up to 6 decimal places for fractional
        seconds, allowing for precise tracking
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_additionalprojectpurchaseorder'
        table stores the date and time when the record was last modified. It uses
        a datetime format with microsecond precision (datetime(6)). This field is
        typically updated automatically to
    is_active:
      type: tinyint(1)
      description: The 'is_active' field is a boolean indicator (tinyint(1)) in the
        'project_additionalprojectpurchaseorder' table, which denotes whether the
        associated purchase order is currently active (1) or inactive (0).
    purchase_order_number:
      type: varchar(50)
      description: The field **'purchase_order_number'** in the **'project_additionalprojectpurchaseorder'**
        table stores the unique identifier for a purchase order associated with a
        project. It is a variable character string with a maximum length of 50 characters,
    purchase_order_doc:
      type: varchar(250)
      description: The `purchase_order_doc` field in the `project_additionalprojectpurchaseorder`
        table stores the document reference or filename related to a purchase order
        as a string, with a maximum length of 250 characters.
    purchase_order_amount_without_gst:
      type: double
      description: "Field Name: `purchase_order_amount_without_gst`  \nType: `double`\
        \  \nDescription: Represents the total amount of the purchase order excluding\
        \ Goods and Services Tax (GST). This value is expressed in the currency specified\
        \ for the project and is used"
    purchase_order_amount_with_gst:
      type: double
      description: The field 'purchase_order_amount_with_gst' in the 'project_additionalprojectpurchaseorder'
        table represents the total amount of the purchase order, including Goods and
        Services Tax (GST). This value is stored as a double to accommodate decimal
        points for
    date:
      type: date
      description: The 'date' field in the 'project_additionalprojectpurchaseorder'
        table stores the date associated with the additional purchase order for a
        project. This field captures when the order was created or recorded, allowing
        for tracking and management of project-related purchases.
    additional_days:
      type: int unsigned
      description: The `additional_days` field in the `project_additionalprojectpurchaseorder`
        table is an unsigned integer that represents the number of additional days
        allocated for a specific project-related purchase order. This value indicates
        any extensions to the original timeline.
    remark:
      type: longtext
      description: The 'remark' field in the 'project_additionalprojectpurchaseorder'
        table is of type 'longtext' and is used to store additional comments or notes
        related to the project purchase order. This field allows for extensive textual
        input, providing flexibility for
    created_by_id:
      type: int
      description: The 'created_by_id' field is an integer that stores the identifier
        of the user who created the record in the 'project_additionalprojectpurchaseorder'
        table. This field helps track the origin of the entry for audit and accountability
        purposes.
    project_id:
      type: bigint
      description: The 'project_id' field in the 'project_additionalprojectpurchaseorder'
        table is of type 'bigint' and serves as a unique identifier for the associated
        project. It links additional purchase order records to their corresponding
        project, facilitating relationships between projects
project_address1:
  description: This table store the data about the inroof project , The 'project_address1' table stores information related to the addresses
    associated with various projects. Each record includes details such as street
    name, city, state, postal code, and country, enabling precise location tracking
    and management for projects within the database.
  fields:
    id:
      type: int
      description: The 'id' field in the 'project_address1' table is an integer that
        serves as the primary identifier for each record in the table. It uniquely
        distinguishes each entry, ensuring that every project address can be referenced
        and accessed efficiently.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_address1' table records
        the date and time when the corresponding record was created. This field uses
        the 'datetime(6)' data type, allowing it to store timestamps with microsecond
        precision.
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_address1' table stores the
        timestamp of the last update made to a record, precise to microseconds. This
        field is used to track when the record was last modified, ensuring data integrity
        and facilitating version
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_address1' table is a tiny
        integer (1) that indicates the active status of a project address. A value
        of 1 signifies that the address is currently active, while a value of 0
    address:
      type: longtext
      description: The 'address' field in the 'project_address1' table is of type
        'longtext' and is used to store detailed address information, allowing for
        extensive text entries. This field can accommodate complex addresses, including
        street names, building numbers, cities
    pincode:
      type: varchar(10)
      description: "**Field:** pincode  \n**Type:** varchar(10)  \n**Description:**\
        \ This field stores the postal code for the project address, allowing for\
        \ up to 10 characters. It is used to identify the specific geographic area\
        \ for mailing and delivery purposes"
    gst:
      type: varchar(16)
      description: The 'gst' field in the 'project_address1' table is a VARCHAR(16)
        that stores the Goods and Services Tax (GST) identification number for the
        associated project. This field allows a maximum of 16 characters, accommodating
        various national GST
    city_id:
      type: int
      description: The 'city_id' field in the 'project_address1' table is an integer
        that uniquely identifies the city associated with a specific project address.
        It serves as a foreign key linking to a cities table, ensuring data integrity
        and enabling efficient geographic data retrieval
    created_by_id:
      type: int
      description: The 'created_by_id' field in the 'project_address1' table is an
        integer that stores the unique identifier of the user who created the corresponding
        project address entry. This field helps to track the creator of the record
        for auditing and accountability purposes.
    state_id:
      type: int
      description: The 'state_id' field is an integer that uniquely identifies a specific
        state associated with a project address in the 'project_address1' table. This
        field is typically used to reference a corresponding entry in a states table,
        providing a relational link to detailed
project_attachments:
  description: This table store the data about the inroof project , The `project_attachments` table stores files and documents associated
    with various projects. Each record includes details about the attachment, such
    as the file name, file type, upload date, and a reference to the related project.
    This table facilitates the organization and
  fields:
    id:
      type: bigint
      description: The 'id' field in the 'project_attachments' table is of type 'bigint'
        and serves as a unique identifier for each attachment record. It is used to
        distinguish between different attachments within the project management system.
    file_url:
      type: varchar(300)
      description: '`file_url`: A VARCHAR field with a maximum length of 300 characters
        that stores the URL link to the attached file for a project.'
    file_name:
      type: varchar(150)
      description: The 'file_name' field in the 'project_attachments' table stores
        the name of the file being attached to a project. It is a variable character
        string with a maximum length of 150 characters.
    context_type:
      type: varchar(24)
      description: The 'context_type' field in the 'project_attachments' table is
        a varchar(24) that specifies the type of context associated with the attachment.
        This field helps categorize the attachment by indicating the specific project
        or entity context in which it is used
    context_id:
      type: int
      description: The 'context_id' field in the 'project_attachments' table is an
        integer that uniquely identifies the context or project to which the attachment
        is associated. It serves as a foreign key linking the attachment to a specific
        project, ensuring proper organization and retrieval
project_bbuapproval:
  description: This table store the data about the inroof project , The `project_bbuapproval` table stores records of budget building unit
    (BBU) approvals associated with various projects. It contains information about
    the approval status, dates, and relevant stakeholders involved in the approval
    process. This table facilitates tracking and managing the
  fields:
    id:
      type: bigint
      description: The 'id' field in the 'project_bbuapproval' table is a unique identifier
        of type 'bigint'. It serves as the primary key for the table, ensuring that
        each record can be uniquely distinguished from others.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_bbuapproval' table stores
        the timestamp when a record was created. It is of type 'datetime(6)', which
        means it can capture date and time along with fractional seconds, providing
        precise time tracking
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_bbuapproval' table is a
        datetime(6) data type that stores the timestamp of the last update made to
        a record. It includes fractional seconds, providing precision to the microsecond
        level.
    is_active:
      type: tinyint(1)
      description: "**Field: `is_active`**  \n**Type:** `tinyint(1)`  \n**Description:**\
        \ Indicates the active status of a BBU approval entry. A value of `1` signifies\
        \ that the approval is active, while a value of"
    section_type:
      type: varchar(50)
      description: The field 'section_type' in the 'project_bbuapproval' table is
        a varchar(50) type that stores a string representing the type of section related
        to the BB&U approval process. It allows for the categorization or identification
        of different
    document:
      type: varchar(250)
      description: The 'document' field in the 'project_bbuapproval' table is a variable
        character string with a maximum length of 250 characters. It is used to store
        the name or identifier of a document related to the BBU approval process for
        the project
    status:
      type: varchar(50)
      description: The 'status' field in the 'project_bbuapproval' table is a VARCHAR
        data type with a maximum length of 50 characters. It indicates the current
        state of the BBu approval process for a project, such as 'Pending', 'Approved
    remarks:
      type: longtext
      description: Field 'remarks' in the table 'project_bbuapproval' is a long text
        field used to store detailed comments, observations, or explanations related
        to the approval process of a project. It can accommodate large amounts of
        text, allowing users to provide comprehensive
    approved_by_id:
      type: int
      description: The field `approved_by_id` is an integer that stores the unique
        identifier of the user or entity who approved the project in the `project_bbuapproval`
        table.
    created_by_id:
      type: int
      description: The 'created_by_id' field in the 'project_bbuapproval' table is
        an integer that stores the unique identifier of the user who created the record.
        This field helps track the origin of the approval request within the project.
    project_id:
      type: bigint
      description: "**Field Name:** project_id  \n**Type:** bigint  \n**Description:**\
        \ A unique identifier for each project associated with the BBU approval process.\
        \ This field serves as a foreign key linking to the corresponding project\
        \ records in the related projects table."
    bbu_no:
      type: varchar(50)
      description: The field 'bbu_no' in the 'project_bbuapproval' table is a variable
        character string with a maximum length of 50 characters. It is used to store
        the unique identification number associated with a Baseband Unit (BBU) for
    bbu_date:
      type: date
      description: The field 'bbu_date' in the 'project_bbuapproval' table stores
        the date when the BBU (Business Benefits Update) approval was given for a
        specific project. This date is critical for tracking approval timelines and
        project milestones.
    approval_date:
      type: date
      description: The 'approval_date' field in the 'project_bbuapproval' table represents
        the date on which a project received formal approval. This field is of type
        'date' and stores the specific date that signifies the approval milestone
        in the project's timeline.
    bbu_amount:
      type: double
      description: The 'bbu_amount' field in the 'project_bbuapproval' table represents
        the monetary amount allocated for Business Budget Unit (BBU) approval, stored
        as a double to accommodate decimal values for precise financial calculations.
project_bbubomitem:
  description: This table store the data about the inroof project , The `project_bbubomitem` table contains detailed information related
    to the items associated with the BBUBOM project. It typically includes fields
    such as item identifiers, descriptions, statuses, quantities, and any relevant
    attributes necessary for tracking and managing project items
  fields:
    id:
      type: bigint
      description: The 'id' field is a unique identifier for each record in the 'project_bbubomitem'
        table. It is of type 'bigint', allowing for a large range of integer values,
        and is typically used to ensure the distinctness of
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_bbubomitem' table stores
        the timestamp of when a record was created. It is of type 'datetime(6)', which
        captures the date and time, including fractional seconds, providing precision
        up to
    updated_at:
      type: datetime(6)
      description: The field 'updated_at' in the 'project_bbubomitem' table is of
        type 'datetime(6)' and is used to store the timestamp of the last update made
        to a record. It includes precision up to 6 decimal places for
    is_active:
      type: tinyint(1)
      description: The 'is_active' field is a tiny integer (1) in the 'project_bbubomitem'
        table that indicates the active status of a record. A value of 1 signifies
        that the record is active, while a value of 0
    quantity:
      type: json
      description: The 'quantity' field in the 'project_bbubomitem' table is a JSON
        data type that stores detailed information about the quantity attributes of
        items. This may include various aspects such as the amount, units, and any
        relevant conditions or specifications related
    bbu_unit_price:
      type: double
      description: "Field Name: `bbu_unit_price`  \nType: Double  \nDescription: This\
        \ field represents the unit price of a bill of material (BOM) item related\
        \ to a project, expressed as a floating-point number. It is used to calculate\
        \ the"
    bbu_total_price:
      type: double
      description: The field 'bbu_total_price' in the 'project_bbubomitem' table represents
        the total price, as a double data type, for the Bill of Units (BBU) item in
        the project. This value typically reflects the aggregated cost
    etd:
      type: date
      description: The 'etd' field in the 'project_bbubomitem' table represents the
        estimated time of departure (ETD) for an item within a project. It is stored
        as a date, indicating the projected date on which the item is expected
    remarks:
      type: longtext
      description: "**Field Name:** remarks  \n**Table:** project_bbubomitem  \n**Description:**\
        \ This field stores detailed comments or notes related to the project item.\
        \ It can hold large amounts of text, allowing for comprehensive descriptions,\
        \ observations, or feedback associated with"
    is_contingency:
      type: tinyint(1)
      description: The field `is_contingency` in the `project_bbubomitem` table is
        a boolean indicator, represented as a `tinyint(1)`, that specifies whether
        the item is a contingency. A value of 1 indicates that the
    is_replacemant:
      type: tinyint(1)
      description: The field 'is_replacemant' is a boolean indicator (tinyint(1))
        in the 'project_bbubomitem' table that signifies whether an item serves as
        a replacement (1) or not (0).
    approved_quantity:
      type: double
      description: The field 'approved_quantity' in the 'project_bbubomitem' table
        represents the quantity of items that have been officially approved for the
        project. It is stored as a double data type to accommodate fractional values,
        allowing for precise quantity specifications.
    approved_unit_price:
      type: double
      description: The field 'approved_unit_price' in the 'project_bbubomitem' table
        represents the approved price per unit for items related to a project. It
        is stored as a double data type to accommodate decimal values, allowing for
        precise pricing information.
    bbu_version_id:
      type: bigint
      description: The field 'bbu_version_id' is of type 'bigint' in the 'project_bbubomitem'
        table. It serves as a unique identifier for the specific version of the BBUBOM
        (Bill of Business Unit Master Item) associated
    bom_section_id:
      type: bigint
      description: The field 'bom_section_id' in the 'project_bbubomitem' table is
        a bigint data type used to uniquely identify a specific section of a Bill
        of Materials (BOM) within a project. This ID is essential for linking BOM
        items
    created_by_id:
      type: int
      description: The field 'created_by_id' in the 'project_bbubomitem' table is
        of type 'int' and represents the unique identifier of the user who created
        the record. It serves to track the creator of each item in the project, facilitating
    make_id:
      type: bigint
      description: The field 'make_id' in the 'project_bbubomitem' table is of type
        'bigint' and serves as a unique identifier for the manufacturer or maker associated
        with the item. This field is typically used to establish relationships with
        other tables
    is_replaced:
      type: tinyint(1)
      description: The field 'is_replaced' is a tiny integer (1) indicating whether
        an item in the 'project_bbubomitem' table has been replaced. A value of 1
        typically signifies that the item has been replaced, while a value of
    bom_item_id:
      type: bigint
      description: The field 'bom_item_id' in the 'project_bbubomitem' table is of
        type 'bigint' and serves as a unique identifier for each bill of materials
        (BOM) item. This identifier is used to reference specific BOM items
project_bbuversion:
  description: This table store the data about the inroof project , The `project_bbuversion` table stores versioning information related
    to the projects within the BBUser system. It tracks the different iterations of
    project documents or components, maintaining details such as version number, creation
    date, associated project ID, and any relevant
  fields:
    id:
      type: bigint
      description: Field `id` in the table `project_bbuversion` is of type `bigint`
        and serves as the unique identifier for each record in the table. It ensures
        that every version entry is distinctly identifiable and allows for efficient
        data retrieval and management
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_bbuversion' table records
        the exact date and time when a new version of the project was created, storing
        the value in microsecond precision.
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_bbuversion' table stores
        the date and time of the most recent update to a specific BBU version record,
        with precision up to microseconds (datetime(6)). This ensures accurate tracking
        of modifications
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_bbuversion' table is a tiny
        integer (1) that indicates the active status of a BBU version. A value of
        1 signifies that the version is currently active, while a value of
    bbu_no:
      type: varchar(50)
      description: The field 'bbu_no' in the 'project_bbuversion' table is of type
        'varchar(50)' and is used to store a unique identifier for the baseband unit
        (BBU) version associated with a specific project. This field
    version:
      type: int unsigned
      description: The 'version' field in the 'project_bbuversion' table is an unsigned
        integer that represents the version number of the project. It is used to track
        updates and changes to the project's build or release versions, ensuring that
        only positive values are recorded
    date:
      type: date
      description: The 'date' field in the 'project_bbuversion' table stores the specific
        date associated with a project version, indicating when the version was created
        or released. The data type is 'date', which captures only the date without
        time information.
    approved_bbu_amount:
      type: double
      description: The field `approved_bbu_amount` in the `project_bbuversion` table
        represents the monetary amount, expressed as a double-precision number, that
        has been approved for budgetary purposes related to the BBU (Baseband Unit)
        version of
    document:
      type: varchar(350)
      description: The field 'document' in the 'project_bbuversion' table is a variable
        character string with a maximum length of 350 characters. It is intended to
        store textual information or references related to documents associated with
        a specific project version.
    remarks:
      type: longtext
      description: The 'remarks' field in the 'project_bbuversion' table is of type
        'longtext' and is used to store detailed comments or notes related to a specific
        BBU version of a project. This field allows for the entry of extensive textual
    contigecny_amount:
      type: double
      description: The field 'contigency_amount' in the 'project_bbuversion' table
        represents a numerical value of type 'double' that indicates the amount allocated
        for contingency in the project budget. This amount may be used to cover unexpected
        expenses or risks that
    contingency_id:
      type: bigint
      description: '**Field: contingency_id**


        **Type:** bigint


        **Description:** A unique identifier for the contingency associated with the
        project version in the ''project_bbuversion'' table. This field links to the
        specific contingency record, enabling tracking and management of project'
    created_by_id:
      type: int
      description: '`created_by_id`: An integer field that stores the unique identifier
        of the user who created the respective project version in the `project_bbuversion`
        table. This field is used for tracking the creator''s information and for
        establishing accountability within the project management'
    project_id:
      type: bigint
      description: The field 'project_id' in the 'project_bbuversion' table is of
        type 'bigint'. It uniquely identifies each project by storing a large numeric
        value that corresponds to the primary key of a project in a related table.
        This field is
    current_bbu_amount:
      type: double
      description: Field 'current_bbu_amount' in table 'project_bbuversion' represents
        the current total amount of Baseband Unit (BBU) resources allocated for the
        specific project version, expressed as a double-precision floating point number.
project_bbuversionprojectinstallationbudget:
  description: This table store the data about the inroof project , The `project_bbuversionprojectinstallationbudget` table stores budgeting
    information related to the installation projects associated with specific BB (Building
    Block) versions. It includes details such as the project ID, budget amounts, cost
    categories, and resource allocation for managing financial
  fields:
    id:
      type: bigint
      description: The 'id' field in the 'project_bbuversionprojectinstallationbudget'
        table is of type 'bigint' and serves as the unique identifier for each record
        in the table. It is used to distinguish individual entries and to establish
        relationships with other
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_bbuversionprojectinstallationbudget'
        table is a datetime(6) type that records the exact timestamp when a budget
        entry was created. The precision of 6 indicates that it captures the time
        down to
    updated_at:
      type: datetime(6)
      description: "**Field Name:** updated_at  \n**Type:** datetime(6)  \n**Description:**\
        \ This field stores the timestamp indicating the last time the record was\
        \ updated. The precision of 6 fractional seconds allows for high-resolution\
        \ tracking of updates. This field is"
    is_active:
      type: tinyint(1)
      description: The field 'is_active' in the 'project_bbuversionprojectinstallationbudget'
        table is a tiny integer (1) that indicates the active status of a budget entry.
        A value of 1 typically represents an active budget, while a value of
    budget_type:
      type: varchar(20)
      description: The 'budget_type' field in the 'project_bbuversionprojectinstallationbudget'
        table is a varchar(20) data type that stores the classification or category
        of the budget, indicating whether it is a fixed, variable, or other types
        of budget
    name:
      type: varchar(150)
      description: The 'name' field in the 'project_bbuversionprojectinstallationbudget'
        table is of type 'varchar(150)' and is used to store the name of the budget
        entry or project installation, allowing for a maximum of 150 characters.
    description:
      type: longtext
      description: The 'description' field in the 'project_bbuversionprojectinstallationbudget'
        table is designed to hold a detailed textual description of the budget allocation
        for project installations related to BBU (Baseband Unit) versioning. This
        field uses the 'long
    remark:
      type: longtext
      description: The 'remark' field in the 'project_bbuversionprojectinstallationbudget'
        table is a longtext data type used to store detailed notes or comments related
        to the budget of a specific project installation version. This field allows
        for extensive textual input, facilitating
    amount:
      type: double
      description: The 'amount' field in the 'project_bbuversionprojectinstallationbudget'
        table represents the budgeted financial amount, stored as a double data type,
        allocated for the installation of a project within a specific version.
    approved_amount:
      type: double
      description: The field 'approved_amount' in the table 'project_bbuversionprojectinstallationbudget'
        represents the total amount, in double format, that has been officially approved
        for the budget allocated to a specific project installation.
    is_contigency:
      type: tinyint(1)
      description: "**Field:** `is_contigency`  \n**Type:** `tinyint(1)`  \n**Description:**\
        \ This field indicates whether the budget entry is classified as a contingency\
        \ budget. A value of `1` represents that the entry is a contingency"
    is_replacemant:
      type: tinyint(1)
      description: The field `is_replacemant` is a boolean indicator represented as
        a tiny integer (1 or 0) in the `project_bbuversionprojectinstallationbudget`
        table. It specifies whether a particular budget entry is a replacement budget
        item,
    is_replaced:
      type: tinyint(1)
      description: The 'is_replaced' field in the 'project_bbuversionprojectinstallationbudget'
        table is a boolean indicator (tinyint(1)) that represents whether a particular
        budget entry has been replaced. A value of '1' indicates that the entry
    bbu_version_id:
      type: bigint
      description: "**Field Name:** bbu_version_id  \n**Type:** bigint  \n**Description:**\
        \ Represents the unique identifier for a specific version of the budget installation\
        \ associated with a project in the 'project_bbuversionprojectinstallationbudget'\
        \ table."
    created_by_id:
      type: int
      description: The field 'created_by_id' in the table 'project_bbuversionprojectinstallationbudget'
        is of type 'int' and stores the unique identifier of the user or entity that
        created the budget entry. This field is used for tracking and auditing purposes
    project_id:
      type: bigint
      description: The `project_id` field in the `project_bbuversionprojectinstallationbudget`
        table is of type `bigint` and serves as a unique identifier for each project.
        It establishes a reference to the corresponding project within the budget
        installation records.
project_bomcontingency:
  description: This table store the data about the inroof project , The `project_bomcontingency` table stores contingency data related
    to the Bill of Materials (BOM) for various projects. It includes details on potential
    additional costs, resource allocations, and risk assessments associated with the
    materials and components used in project
  fields:
    id:
      type: bigint
      description: The 'id' field in the 'project_bomcontingency' table is a unique
        identifier of type 'bigint' that serves as the primary key for each record
        in the table, ensuring that each entry can be distinctly referenced.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_bomcontingency' table stores
        the date and time when a record was created. It has a precision of microseconds
        (6), allowing for accurate timestamping of events.
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_bomcontingency' table stores
        the timestamp of the last update made to the record, with precision up to
        microseconds (datetime(6)). This field is used to track when changes were
        last
    is_active:
      type: tinyint(1)
      description: The field 'is_active' in the 'project_bomcontingency' table is
        a boolean indicator represented as a tinyint(1). It signifies whether the
        associated record is currently active (1) or inactive (0) within the project
        BOM
    contingency_no:
      type: varchar(50)
      description: The 'contingency_no' field in the 'project_bomcontingency' table
        is a string variable (varchar) with a maximum length of 50 characters. It
        is used to uniquely identify the contingency associated with a specific project
        bill of
    remark:
      type: longtext
      description: Field 'remark' in the 'project_bomcontingency' table is a longtext
        field that stores detailed comments or notes related to the bill of materials
        contingency for a specific project. This field allows for extensive text input,
        enabling users to provide
    status:
      type: varchar(50)
      description: The 'status' field in the 'project_bomcontingency' table is a variable
        character string with a maximum length of 50 characters. It is used to indicate
        the current state or condition of a contingency item within a project, such
        as
    approval_doc:
      type: varchar(200)
      description: "Field Name: `approval_doc`  \nType: `varchar(200)`  \nDescription:\
        \ This field stores the reference or path to the document that provides approval\
        \ for the project\u2019s bill of materials contingency. It is a text field\
        \ with a maximum length of"
    approval_at:
      type: datetime(6)
      description: The field 'approval_at' in the 'project_bomcontingency' table stores
        the date and time when a contingency was approved. It is of type 'datetime(6)',
        allowing for precision up to six decimal places of seconds.
    approved_by_id:
      type: int
      description: The 'approved_by_id' field is an integer that holds the unique
        identifier of the user or entity that approved the contingency item within
        the 'project_bomcontingency' table. This field links to the corresponding
        user in the system, indicating who
    created_by_id:
      type: int
      description: The `created_by_id` field in the `project_bomcontingency` table
        is an integer that stores the unique identifier of the user or entity that
        created the entry. It is used for tracking the originator of the record for
        audit and
    project_id:
      type: bigint
      description: '`project_id`: A bigint field that uniquely identifies a project
        in the `project_bomcontingency` table. It serves as a foreign key linking
        to the corresponding project record in the projects database.'
    contingency_amount:
      type: double
      description: The 'contingency_amount' field in the 'project_bomcontingency'
        table represents the monetary value allocated as a contingency fund for a
        project. It is stored as a double data type, allowing for the inclusion of
        decimal values to accurately
    total_amount:
      type: double
      description: "**Field:** `total_amount`  \n**Type:** `double`  \n**Description:**\
        \ This field represents the total monetary amount allocated for contingencies\
        \ within the project Bill of Materials (BOM). It is used to track the financial\
        \ provisions for unexpected costs"
project_bomheadbudget:
  description: The `project_bomheadbudget` table stores budget-related information
    for the bill of materials (BOM) associated with various projects. It includes
    details such as budget estimates, allocated funds, and financial tracking metrics
    to support project management and cost control.
  fields:
    id:
      type: int
      description: "**Field Name:** id  \n**Table Name:** project_bomheadbudget  \n\
        **Description:** A unique identifier for each record in the project_bomheadbudget\
        \ table, represented as an integer. This field serves as the primary key to\
        \ uniquely associate budget"
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_bomheadbudget' table stores
        the timestamp of when the record was created, with a precision of up to 6
        digits for fractional seconds. This field is useful for tracking the creation
        date and time
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_bomheadbudget' table stores
        the timestamp of the last update made to a record. It is of type 'datetime(6)',
        allowing for precision up to six fractional seconds, enabling accurate tracking
        of
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_bomheadbudget' table indicates
        the active status of a budget entry. It is of type 'tinyint(1)', where a value
        of 1 represents that the budget entry is currently active,
    bom_head:
      type: varchar(20)
      description: The field 'bom_head' in the 'project_bomheadbudget' table is a
        variable character string with a maximum length of 20 characters. It is used
        to store a unique identifier or label related to the Bill of Materials (BOM)
    approved_bbu_amount:
      type: double
      description: The field `approved_bbu_amount` in the `project_bomheadbudget`
        table stores the approved budgeted amount, represented as a double-precision
        floating-point number, for the project's Bill of Materials (BOM) head budget.
        This value
    total_amount_consumed:
      type: double
      description: "**Field:** total_amount_consumed  \n**Type:** double  \n**Description:**\
        \ Represents the total amount of resources consumed for the budget associated\
        \ with a specific project bill of materials (BOM). This value is typically\
        \ used for financial tracking and management within the"
    created_by_id:
      type: int
      description: "**Field:** `created_by_id`  \n**Type:** `int`  \n**Description:**\
        \ This field stores the unique identifier of the user who created the budget\
        \ entry in the `project_bomheadbudget` table. It is used to track the"
    project_id:
      type: int
      description: The 'project_id' field in the 'project_bomheadbudget' table is
        an integer that uniquely identifies each project associated with the budget
        head of materials in the Bill of Materials (BOM). It serves as a foreign key
        to link budget records
    contingency_amount:
      type: double
      description: The field `contingency_amount` in the `project_bomheadbudget` table
        represents a numeric value (double) that indicates the budgeted amount set
        aside for unforeseen expenses or risks related to the project. This amount
        provides a financial buffer to
    bbu_amount_per_watt:
      type: double
      description: "**Field: bbu_amount_per_watt**  \n**Type:** double  \n**Description:**\
        \ This field represents the budgeted amount for Battery Backup Units (BBUs)\
        \ per watt of power capacity, allowing for cost calculations and budgeting\
        \ in relation to energy"
    contingency_amount_per_watt:
      type: double
      description: The field 'contingency_amount_per_watt' in the 'project_bomheadbudget'
        table represents the additional budget allocated per watt of power capacity
        for unforeseen expenses or risks in the project. It is stored as a double
        data type to accommodate
project_bomitem:
  description: The 'project_bomitem' table stores information related to individual
    items within a bill of materials (BOM) for various projects. Each record typically
    includes fields for item identification, description, quantity, unit of measure,
    cost, and associated project details
  fields:
    id:
      type: bigint
      description: The 'id' field is a unique identifier for each record in the 'project_bomitem'
        table. It is of type 'bigint', allowing for the storage of large integer values,
        which ensures that each BOM item can be distinctly recognized.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_bomitem' table stores the
        timestamp of when a record was created. It is of type 'datetime(6)', which
        allows for precision up to six decimal places for fractional seconds, providing
        a detailed
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_bomitem' table is a datetime(6)
        type field that stores the timestamp of the most recent update made to a record
        in the table. This field includes precision up to microseconds, allowing
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_bomitem' table is a tinyint(1)
        that indicates the active status of a bill of materials item. A value of 1
        signifies that the item is currently active and in use,
    quantity:
      type: json
      description: The 'quantity' field in the 'project_bomitem' table is of type
        JSON and stores structured data representing the quantity of various components
        or items related to a specific project. This allows for flexible data storage
        of quantities that may vary by attributes such
    estimated_cost_price:
      type: double
      description: The field 'estimated_cost_price' in the 'project_bomitem' table
        represents the projected cost of an individual bill of materials (BOM) item
        for a specific project. It is stored as a double precision number, allowing
        for precise financial calculations
    cost_price:
      type: double
      description: The 'cost_price' field in the 'project_bomitem' table represents
        the monetary cost of a single unit of the item associated with a bill of materials
        (BOM) in the project. It is stored as a double to accommodate decimal values
    selling_price:
      type: double
      description: The 'selling_price' field in the 'project_bomitem' table represents
        the retail price at which an item is sold, stored as a double data type to
        allow for decimal values.
    bom_section_id:
      type: int
      description: The field 'bom_section_id' is of type 'int' in the 'project_bomitem'
        table. It represents the unique identifier for the section of the bill of
        materials (BOM) to which the specific BOM item belongs. This field
    created_by_id:
      type: int
      description: The 'created_by_id' field in the 'project_bomitem' table is an
        integer that stores the unique identifier of the user who created the BOM
        item. This field helps track the origin of each item for auditing and ownership
        purposes.
    item_id:
      type: bigint
      description: The 'item_id' field in the 'project_bomitem' table is of type 'bigint'
        and serves as the unique identifier for each item in the bill of materials
        (BOM). It is used to reference and manage individual components within
    make_id:
      type: int
      description: The field 'make_id' is an integer that uniquely identifies the
        manufacturer or make associated with a specific bill of materials item in
        the 'project_bomitem' table.
    vendor_id:
      type: int
      description: The `vendor_id` field in the `project_bomitem` table is an integer
        that uniquely identifies the vendor associated with a specific Bill of Materials
        (BOM) item. This field establishes a relationship between the BOM item and
        its corresponding vendor in
    unit_price:
      type: double
      description: The field 'unit_price' in the table 'project_bomitem' represents
        the price per unit of an item in the bill of materials (BOM) for a project.
        It is stored as a double data type to accommodate decimal values, allowing
    drawing:
      type: json
      description: The 'drawing' field in the 'project_bomitem' table is a JSON type
        column that stores structured data related to the drawings associated with
        each bill of materials (BOM) item. This may include details such as drawing
        file paths, specifications
    status:
      type: varchar(50)
      description: The 'status' field in the 'project_bomitem' table is a varchar
        (variable character) data type with a maximum length of 50 characters. It
        is used to indicate the current state or condition of the bill of materials
        item within a
    remarks:
      type: longtext
      description: The 'remarks' field in the 'project_bomitem' table is a long text
        field designed to store detailed comments or notes related to a specific bill
        of materials item in a project. This field can accommodate extensive descriptions,
        observations, or special instructions
    bbu_total_price:
      type: double
      description: The field 'bbu_total_price' in the 'project_bomitem' table represents
        the total price, expressed as a double precision floating-point number, for
        the bill of materials item in a project. It is used to store the cumulative
        cost associated
    bbu_unit_price:
      type: double
      description: The field 'bbu_unit_price' in the 'project_bomitem' table represents
        the unit price of a specific component or item in the bill of materials (BOM)
        for a project, measured as a double-precision floating-point number.
    status_transtion_history:
      type: longtext
      description: The `status_transition_history` field in the `project_bomitem`
        table is of type `longtext` and stores a detailed record of status changes
        for the bill of materials (BOM) items. This field captures the historical
        progression of the
    booked_quantity:
      type: json
      description: The 'booked_quantity' field in the 'project_bomitem' table is of
        type JSON and stores detailed information about the quantities of items that
        have been booked for a specific project. This field allows for flexible data
        structures, enabling the representation of
    quantity_left_after_booking:
      type: json
      description: The field `quantity_left_after_booking` in the `project_bomitem`
        table is of type JSON and stores the remaining quantities of materials or
        items after a booking occurs. This field can hold complex structured data,
        allowing for detailed tracking of quantities per
    delivered_quantity:
      type: json
      description: The 'delivered_quantity' field in the 'project_bomitem' table is
        of type 'json' and stores detailed information about the quantities delivered
        for each item in the project Bill of Materials (BOM). This field can contain
        structured data in
    contingency_item_price:
      type: double
      description: The field 'contingency_item_price' in the 'project_bomitem' table
        represents the additional cost allocated for unforeseen expenses related to
        a specific bill of materials item. This value is stored as a double data type
        to accommodate decimal prices with precision
    contingency_item_quantity:
      type: double
      description: The field `contingency_item_quantity` in the `project_bomitem`
        table represents the quantity of items allocated for contingency purposes
        in a project bill of materials (BOM). It is stored as a double data type to
        accommodate fractional quantities,
    is_contingency:
      type: tinyint(1)
      description: The field 'is_contingency' in the 'project_bomitem' table is a
        boolean indicator represented as a tiny integer (1 for true, 0 for false).
        It denotes whether the bill of materials item is a contingency item, which
    quantity_left_after_purchase_order:
      type: json
      description: The field `quantity_left_after_purchase_order` in the `project_bomitem`
        table stores a JSON object representing the quantities of items remaining
        after processing a purchase order. It provides a structured format to capture
        various scenarios, such as multiple items or different
    booked_po_quantity:
      type: json
      description: The field 'booked_po_quantity' in the 'project_bomitem' table stores
        a JSON object that contains information about the quantities of booked purchase
        orders associated with bill of materials (BOM) items for specific projects.
        This allows for flexible storage
    etd:
      type: date
      description: "**Field: etd**  \n**Type: date**  \n**Description:** This field\
        \ represents the estimated delivery date for items listed in the bill of materials\
        \ (BOM) for the associated project. It is used to track when the items are\
        \ expected to"
    approved_quantity:
      type: double
      description: The 'approved_quantity' field in the 'project_bomitem' table stores
        the approved quantity of components or materials for a specific Bill of Materials
        (BOM) item. It is stored as a double data type, allowing for precise representation
        of fractional
    approved_unit_price:
      type: double
      description: The field 'approved_unit_price' in the 'project_bomitem' table
        represents the finalized price per unit for an item in the project bill of
        materials. It is stored as a double data type to accommodate decimal values,
        allowing for precise financial calculations
    total_contingency_amount:
      type: double
      description: The field 'total_contingency_amount' in the 'project_bomitem' table
        represents the total amount allocated as a contingency for the related bill
        of materials item in a project. It is of type 'double' to accommodate decimal
        values, allowing
    merged_into_id:
      type: bigint
      description: The 'merged_into_id' field in the 'project_bomitem' table is of
        type 'bigint' and stores the unique identifier of the project bill of materials
        (BOM) item into which the current item has been merged. This field
    is_replacemant:
      type: tinyint(1)
      description: The field `is_replacement` in the `project_bomitem` table is a
        tiny integer (1) that indicates whether the BOM item is a replacement part.
        A value of 1 signifies that the item is a replacement, while a value
    replaced_with_id:
      type: bigint
      description: The field 'replaced_with_id' in the 'project_bomitem' table is
        a bigint that stores the unique identifier of the bill of materials (BOM)
        item that has replaced the current item. This field is used to establish a
        relationship
project_bomitemcontingency:
  description: The `project_bomitemcontingency` table stores information related to
    contingency items associated with bill of materials (BOM) in a project. It contains
    details such as item identifiers, quantities, costs, and descriptions of the contingency
    items that may
  fields:
    id:
      type: bigint
      description: The field 'id' is a unique identifier of type 'bigint' in the 'project_bomitemcontingency'
        table. It serves as the primary key for the table, ensuring each record can
        be distinctly referenced.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_bomitemcontingency' table
        stores the timestamp when a record was created. It is of type 'datetime(6)',
        which allows for precision up to microseconds, enabling precise tracking of
        creation
    updated_at:
      type: datetime(6)
      description: The `updated_at` field in the `project_bomitemcontingency` table
        stores the timestamp of the last update made to a record, capturing the date
        and time with precision up to microseconds (6 decimal places).
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_bomitemcontingency' table
        is a tiny integer (1) that indicates the active status of a contingency item.
        A value of '1' signifies that the item is currently active, while
    quantity:
      type: double
      description: "**Field: quantity**  \n**Type:** double  \n**Description:** Represents\
        \ the numerical amount of a specific item in the Bill of Materials (BOM) contingency\
        \ for a project, allowing for fractional values to accommodate precise measurements."
    contingency_type:
      type: varchar(50)
      description: The 'contingency_type' field in the 'project_bomitemcontingency'
        table stores the type of contingency associated with a bill of materials (BOM)
        item. It is a string value with a maximum length of 50 characters
    unit_price:
      type: double
      description: The 'unit_price' field in the 'project_bomitemcontingency' table
        represents the cost per individual unit of an item or resource, specified
        as a double data type to allow for decimal precision in pricing.
    remarks:
      type: longtext
      description: The 'remarks' field in the 'project_bomitemcontingency' table is
        of type 'longtext' and is used to store detailed comments or notes related
        to specific contingencies in the bill of materials (BOM) for a project
    bom_section_id:
      type: bigint
      description: The `bom_section_id` field is a bigint that references the unique
        identifier of a section within a Bill of Materials (BOM) in the `project_bomitemcontingency`
        table. This field is used to associate contingency items with specific
    created_by_id:
      type: int
      description: '`created_by_id`: An integer field in the `project_bomitemcontingency`
        table that stores the unique identifier of the user who created the record,
        allowing for tracking of record ownership and contributions.'
    item_id:
      type: bigint
      description: "**Field:** `item_id`  \n**Type:** `bigint`  \n**Description:**\
        \ A unique identifier for each item in the project bill of material (BOM)\
        \ contingency table, used to track and reference specific items within the\
        \ project framework."
    make_id:
      type: bigint
      description: The `make_id` field is a bigint data type that stores a unique
        identifier for the manufacturer or supplier associated with a specific bill
        of materials item contingency in the `project_bomitemcontingency` table.
    unit_id:
      type: bigint
      description: The field **`unit_id`** in the **`project_bomitemcontingency`**
        table is of type **`bigint`** and represents a unique identifier for the unit
        associated with a contingency item in a project Bill of Materials
    date:
      type: date
      description: The 'date' field in the 'project_bomitemcontingency' table stores
        the specific date related to the contingency item for a project. This field
        helps track timelines and important milestones associated with project item
        contingencies.
    last_quantity:
      type: double
      description: The field 'last_quantity' in the 'project_bomitemcontingency' table
        represents the most recent quantity value (of type double) associated with
        the contingency items in a bill of materials (BOM) for a project. This field
        is
    last_unit_price:
      type: double
      description: The field **'last_unit_price'** in the **'project_bomitemcontingency'**
        table represents the most recent unit price of an item in the bill of materials
        (BOM) contingency. It is stored as a double-
    last_bbu_item_total_amount:
      type: double
      description: "**Field: last_bbu_item_total_amount**  \n**Type:** Double  \n\
        **Description:** This field stores the total amount of the last Budgeted Business\
        \ Unit (BBU) item in the project Bill of Materials (BOM) contingency, represented"
    total_amount:
      type: double
      description: The 'total_amount' field in the 'project_bomitemcontingency' table
        represents the total monetary amount associated with a specific contingency
        item in a project bill of materials (BOM). This value is stored as a double,
        allowing for precise
    bom_contingency_id:
      type: bigint
      description: The 'bom_contingency_id' field in the 'project_bomitemcontingency'
        table is of type 'bigint' and serves as a unique identifier for a specific
        contingency item associated with a Bill of Materials (BOM) within
    status:
      type: varchar(50)
      description: The 'status' field in the 'project_bomitemcontingency' table is
        a VARCHAR(50) data type that stores the current status of the contingency
        item within a project Bill of Materials (BOM). This field is used to indicate
    approver_remark:
      type: longtext
      description: The 'approver_remark' field in the 'project_bomitemcontingency'
        table is of type 'longtext' and is used to store detailed comments or remarks
        made by the approver regarding the item contingency. This field allows for
    bom_head_name:
      type: varchar(30)
      description: The field 'bom_head_name' is of type 'varchar(30)' in the table
        'project_bomitemcontingency'. It stores the name of the Bill of Materials
        (BOM) header associated with the contingency items in a project,
    name:
      type: varchar(200)
      description: "**Field:** `name`  \n**Type:** `varchar(200)`  \n**Description:**\
        \ This field stores the name of the contingency item associated with a project\
        \ bill of materials (BOM). It allows for a maximum of 200 characters and is"
    merged_into_id:
      type: bigint
      description: The 'merged_into_id' field in the 'project_bomitemcontingency'
        table is a bigint type that stores the identifier of another record that this
        record has been merged into, indicating a reference to the consolidated entry.
    replaced_with_id:
      type: bigint
      description: The field 'replaced_with_id' in the 'project_bomitemcontingency'
        table stores the identifier (as a bigint) of the item that replaces the current
        contingency item. This field is used to track replacements within the bill
        of materials
    is_replaced:
      type: tinyint(1)
      description: The field 'is_replaced' in the 'project_bomitemcontingency' table
        is a tiny integer (1) that indicates whether an item has been replaced in
        the bill of materials (BOM) contingency. A value of 1
    is_replacement:
      type: tinyint(1)
      description: The field 'is_replacement' in the 'project_bomitemcontingency'
        table is a tiny integer (1). It indicates whether a specific item is a replacement
        part (1 for true, 0 for false).
    contingency_amount:
      type: double
      description: The 'contingency_amount' field represents the monetary value allocated
        for unexpected costs or overruns associated with a specific project Bill of
        Materials (BOM) item. It is stored as a double data type to accommodate decimal
        values, allowing for precise financial
project_bomsection:
  description: The `project_bomsection` table stores information related to different
    sections of a Bill of Materials (BOM) used in various projects. It includes details
    about the components, quantities, and specifications required for each section
    of the project, facilitating efficient resource
  fields:
    id:
      type: bigint
      description: The 'id' field in the 'project_bomsection' table is a bigint data
        type that uniquely identifies each record within the table. It serves as the
        primary key, ensuring that each Bill of Materials (BOM) section has a distinct
        identifier
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_bomsection' table stores
        the date and time when a record was created, with precision up to microseconds
        (datetime(6)). It is useful for tracking the creation timestamp of each entry
        in the
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_bomsection' table records
        the date and time when the record was last updated. It is stored in datetime
        format with microsecond precision (up to 6 digits).
    is_active:
      type: tinyint(1)
      description: Field 'is_active' in the 'project_bomsection' table indicates whether
        a bill of materials section is active. It uses a tinyint(1) data type, where
        a value of 1 represents 'active' and a value of
    bom_head:
      type: varchar(20)
      description: The field **'bom_head'** in the **'project_bomsection'** table
        is a variable character string with a maximum length of 20 characters. It
        is used to store a brief identifier or title for the bill of materials (B
    name:
      type: varchar(150)
      description: The 'name' field in the 'project_bomsection' table is a variable
        character string with a maximum length of 150 characters. It is used to store
        the name or title of the BOM (Bill of Materials) section associated with a
        project
    created_by_id:
      type: int
      description: The field 'created_by_id' is of type 'int' in the 'project_bomsection'
        table and stores the unique identifier (ID) of the user or entity that created
        the BOM (Bill of Materials) section. This field is used
    project_id:
      type: int
      description: The 'project_id' field is an integer that uniquely identifies a
        specific project within the 'project_bomsection' table. It serves as a foreign
        key to link each bill of materials section to its corresponding project, ensuring
        data integrity and facilitating relational queries
    bbu_amount:
      type: double
      description: The field 'bbu_amount' in the table 'project_bomsection' represents
        the monetary amount associated with the Bill of Units (BBU) for a specific
        section of the project. It is stored as a double data type to accommodate
        decimal values
    total_amount_consumed:
      type: double
      description: "**Field:** total_amount_consumed  \n**Type:** double  \n**Description:**\
        \ This field represents the total quantity of resources consumed within a\
        \ specific BOM (Bill of Materials) section of a project, expressed as a double-precision\
        \ floating-point number. It"
project_bomtemplate:
  description: The `project_bomtemplate` table is designed to store Bill of Materials
    (BOM) templates for various projects. It holds structured information about components,
    materials, and their relationships required for project assembly. This table facilitates
    project planning and resource allocation by
  fields:
    id:
      type: int
      description: The 'id' field in the 'project_bomtemplate' table is an integer
        that serves as the unique identifier for each record in the table. It ensures
        that each bill of materials template can be distinctly referenced and managed
        within the database.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_bomtemplate' table is a
        datetime(6) field that stores the exact date and time when the BOM template
        record was created. The precision of 6 allows for microsecond-level detail
        in the
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_bomtemplate' table stores
        the timestamp of the last update made to the record. It is of type 'datetime(6)',
        which allows for precision up to microseconds, providing a detailed account
        of
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_bomtemplate' table is a tiny
        integer (1) that indicates the active status of a Bill of Materials (BOM)
        template. A value of '1' signifies that the BOM template is
    project_type:
      type: varchar(20)
      description: The field 'project_type' in the 'project_bomtemplate' table is
        a VARCHAR(20) that stores the type of project associated with the Bill of
        Materials (BOM) template. It allows for up to 20 characters, enabling the
    name:
      type: varchar(100)
      description: The 'name' field in the 'project_bomtemplate' table is a VARCHAR
        data type with a maximum length of 100 characters. It is used to store the
        name or title of the BOM (Bill of Materials) template associated with a project
    created_by_id:
      type: int
      description: The `created_by_id` field in the `project_bomtemplate` table is
        an integer that stores the unique identifier of the user who created the BOM
        (Bill of Materials) template. This field is used for tracking and auditing
        purposes, allowing for
project_bomtemplateitems:
  description: The `project_bomtemplateitems` table stores the components and materials
    associated with specific bill of materials (BOM) templates for projects. Each
    record includes details such as item identification, quantity, unit of measure,
    and any relevant specifications needed for project
  fields:
    id:
      type: int
      description: "**Field:** `id`  \n**Type:** `int`  \n**Description:** A unique\
        \ identifier for each record in the `project_bomtemplateitems` table, used\
        \ to distinguish individual items within the bill of materials (BOM) template."
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_bomtemplateitems' table
        stores the date and time when the record was created. It is of type 'datetime(6)',
        which allows for precision up to microseconds. This field is used for
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_bomtemplateitems' table
        stores the timestamp of the last modification made to a record. It is of type
        'datetime(6)', allowing for precision up to microseconds, which provides detailed
        tracking of
    is_active:
      type: tinyint(1)
      description: The `is_active` field is a `tinyint(1)` data type used in the `project_bomtemplateitems`
        table to indicate whether a bill of materials (BOM) template item is currently
        active (1) or inactive (0
    bom_template_id:
      type: int
      description: The field 'bom_template_id' in the 'project_bomtemplateitems' table
        is an integer that serves as a unique identifier for each Bill of Materials
        (BOM) template associated with project items. It links the specific BOM template
        to the corresponding
    created_by_id:
      type: int
      description: The field `created_by_id` is an integer that stores the unique
        identifier of the user who created the specific record in the `project_bomtemplateitems`
        table. This field helps track the origin of the record for auditing and accountability
        purposes.
    item_id:
      type: int
      description: The 'item_id' field in the 'project_bomtemplateitems' table is
        an integer that uniquely identifies each item within the bill of materials
        (BOM) template. This field serves as a primary key to reference individual
        items in the template.
    merged_into_id:
      type: bigint
      description: The field `merged_into_id` in the `project_bomtemplateitems` table
        is of type `bigint` and represents the unique identifier of the Bill of Materials
        (BOM) template item that this item has been merged into. This field
project_company:
  description: The 'project_company' table stores information about the companies
    involved in various projects. It typically includes fields such as the company
    ID, project ID, company name, role in the project, and contact information. This
    table serves to establish relationships between projects and
  fields:
    id:
      type: int
      description: The 'id' field in the 'project_company' table is an integer that
        serves as the primary key, uniquely identifying each record within the table.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_company' table stores the
        date and time when a record was created, with precision up to microseconds.
        This field helps track the creation timestamp of each entry in the table.
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_company' table records the
        date and time when a project's company information was last modified. It is
        stored with a precision of up to 6 decimal places for fractional seconds,
        allowing for precise time tracking of
    is_active:
      type: tinyint(1)
      description: Field 'is_active' in the 'project_company' table is a tinyint(1)
        that indicates whether a company is currently active in the project. A value
        of 1 signifies that the company is active, while a value of 0 indicates
    name:
      type: varchar(150)
      description: The 'name' field in the 'project_company' table is a variable character
        string with a maximum length of 150 characters. It is used to store the name
        of the company associated with the project.
    email:
      type: varchar(254)
      description: "**Field Name:** email  \n**Type:** varchar(254)  \n**Table:**\
        \ project_company  \n**Description:** This field stores the email address\
        \ associated with the project company. It can contain up to 254 characters\
        \ and is used for communication and identification"
    phone:
      type: varchar(16)
      description: The 'phone' field in the 'project_company' table stores the contact
        phone number of the company. It is of type 'varchar(16)', allowing flexibility
        in formatting, including country codes and separators, while accommodating
        up to 16 characters.
    website:
      type: varchar(150)
      description: The 'website' field in the 'project_company' table is a varchar
        data type with a maximum length of 150 characters. It stores the URL of the
        company's official website, allowing users to access additional information
        about the company online.
    gstin:
      type: varchar(16)
      description: The 'gstin' field in the 'project_company' table is a variable
        character field with a maximum length of 16 characters. It stores the Goods
        and Services Tax Identification Number, which is a unique identifier assigned
        to businesses for tax purposes in India
    address:
      type: longtext
      description: The 'address' field in the 'project_company' table is of type 'longtext'
        and is used to store the complete address of the company associated with a
        project. This field can accommodate large amounts of text, allowing for detailed
        information such as
    area:
      type: varchar(50)
      description: The 'area' field in the 'project_company' table is a varchar data
        type with a maximum length of 50 characters. It is used to specify the geographical
        or functional area in which the company operates or focuses its efforts. This
        can include industrial
    pincode:
      type: int
      description: The 'pincode' field in the 'project_company' table is an integer
        that represents the postal code for the company's location. It is used to
        identify the specific area within the postal system for mailing purposes.
    primary_poc_client_name:
      type: varchar(50)
      description: '`primary_poc_client_name`: This field stores the name of the primary
        point of contact (POC) for a client associated with a project, with a maximum
        length of 50 characters.'
    primary_poc_email:
      type: varchar(254)
      description: The 'primary_poc_email' field in the 'project_company' table stores
        the email address of the primary point of contact for the company associated
        with the project. This field is defined as a variable character string with
        a maximum length of 254 characters
    primary_poc_phone:
      type: varchar(16)
      description: The field 'primary_poc_phone' in the 'project_company' table stores
        the phone number of the primary point of contact (POC) for the company associated
        with a project. It is a variable character field that can accommodate up to
        16
    primary_poc_designation:
      type: varchar(30)
      description: "**Field: primary_poc_designation**  \n**Type:** varchar(30)  \n\
        **Description:** This field stores the job title or designation of the primary\
        \ point of contact for a project within the associated company. It is limited\
        \ to 30 characters"
    company_logo:
      type: varchar(100)
      description: Field 'company_logo' in the 'project_company' table is a variable
        character string (varchar) with a maximum length of 100 characters. It stores
        the URL or file path of the company's logo image, used for branding and visual
        representation in projects
    activity_history:
      type: json
      description: The `activity_history` field in the `project_company` table is
        of type JSON and stores a structured record of activities related to the project
        company. This may include timestamps, descriptions of activities, participant
        information, and any relevant changes or updates, allowing
    city_id:
      type: int
      description: The `city_id` field in the `project_company` table is an integer
        that uniquely identifies the city associated with a particular project company.
        This field serves as a foreign key, linking to a corresponding entry in the
        cities table, thereby establishing a relationship
    created_by_id:
      type: int
      description: The field `created_by_id` in the `project_company` table is of
        type `int` and stores the identifier of the user who created the project company
        record. This field is used to track the origin of the entry for auditing and
        reference purposes
    lead_source_id:
      type: int
      description: The field 'lead_source_id' is an integer that identifies the source
        from which a lead originated for a project company. This field allows for
        categorization and tracking of leads based on their sources, facilitating
        targeted follow-up and analytics.
    salesperson_id:
      type: int
      description: The `salesperson_id` field in the `project_company` table is an
        integer that uniquely identifies the salesperson associated with the project.
        It serves as a foreign key linking to the salesperson's record in a separate
        table, allowing for the tracking of sales
    gst_doc:
      type: varchar(650)
      description: "**Field: gst_doc**  \n**Type:** varchar(650)  \n**Description:**\
        \ This field stores the Goods and Services Tax (GST) document details for\
        \ the associated company in the project, allowing for up to 650 characters\
        \ of text."
    pan:
      type: varchar(16)
      description: The 'pan' field in the 'project_company' table is a VARCHAR(16)
        type that stores the Permanent Account Number (PAN) of the company. This unique
        identifier is used for tax purposes in India and consists of alphanumeric
        characters, typically
    pan_doc:
      type: varchar(650)
      description: The field 'pan_doc' in the 'project_company' table is a variable
        character string that can hold up to 650 characters. It is intended to store
        the Permanent Account Number (PAN) document details for the associated project
        company. This information is
    mobile:
      type: varchar(16)
      description: "**Field:** mobile  \n**Type:** varchar(16)  \n**Description:**\
        \ This field stores the mobile phone number of the company, with a maximum\
        \ length of 16 characters. It is used to facilitate communication with the\
        \ company."
    primary_poc_mobile:
      type: varchar(16)
      description: "**Field Name:** primary_poc_mobile  \n**Type:** varchar(16)  \n\
        **Description:** This field stores the mobile phone number of the primary\
        \ point of contact (POC) for the associated project company. The number can\
        \ contain up to"
project_epc:
  description: The `project_epc` table stores information related to Engineering,
    Procurement, and Construction (EPC) projects. It includes details such as project
    ID, project name, location, start and end dates, budget, and status. This table
    is used
  fields:
    id:
      type: bigint
      description: The 'id' field in the 'project_epc' table is a bigint data type
        that serves as the unique identifier for each record in the table. It ensures
        that each entry can be distinctly referenced and managed within the database.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_epc' table stores the timestamp
        of when a record was created, with precision up to microseconds (datetime(6)).
        It is used to track the creation date and time for each entry in the
    updated_at:
      type: datetime(6)
      description: The `updated_at` field in the `project_epc` table is a datetime(6)
        type that records the date and time of the most recent update to the project
        entry. It provides millisecond precision to track modifications accurately.
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_epc' table is a tiny integer
        (1) that indicates the active status of a project. A value of '1' signifies
        that the project is currently active, while a value of '0
    name:
      type: varchar(150)
      description: The 'name' field in the 'project_epc' table is a variable character
        string with a maximum length of 150 characters. It is used to store the name
        of the project, providing a descriptive identifier for each entry in the table.
    contact_person_name:
      type: varchar(150)
      description: "**Field Name:** contact_person_name  \n**Type:** varchar(150)\
        \  \n**Description:** This field stores the name of the contact person associated\
        \ with the project, with a maximum length of 150 characters."
    contact_no:
      type: varchar(150)
      description: The field **contact_no** in the **project_epc** table stores phone
        number information as a string, allowing for various formatting styles, with
        a maximum length of 150 characters. It is used to record contact numbers for
        individuals or organizations associated with
    email:
      type: varchar(150)
      description: The 'email' field in the 'project_epc' table is a string type field
        (varchar) that can store up to 150 characters. It is used to store email addresses
        associated with the project.
    address:
      type: varchar(150)
      description: Field 'address' in the 'project_epc' table is a variable character
        string with a maximum length of 150 characters. It is used to store the address
        associated with the EPC (Engineering, Procurement, and Construction) project.
    pincode:
      type: varchar(10)
      description: Field 'pincode' in the 'project_epc' table is a varchar(10) data
        type that stores the postal code associated with a specific project location.
        It is used to identify geographical regions for mailing and delivery purposes.
    gst:
      type: varchar(20)
      description: The 'gst' field in the 'project_epc' table stores the Goods and
        Services Tax (GST) identification number as a string, allowing for a maximum
        length of 20 characters. This field is used to track and manage GST-related
        information for
    city_id:
      type: int
      description: The 'city_id' field in the 'project_epc' table is an integer that
        serves as a foreign key, uniquely identifying the city associated with each
        project within the EPC (Engineering, Procurement, and Construction) context.
    created_by_id:
      type: int
      description: The field `created_by_id` is an integer that stores the unique
        identifier of the user who created the entry in the `project_epc` table. This
        field establishes a relationship with the user table, allowing for tracking
        of the creator of each project
    state_id:
      type: int
      description: The `state_id` field in the `project_epc` table is an integer that
        uniquely identifies the current state or status of the project. It serves
        as a foreign key, linking to a corresponding entry in a states or status-related
        table, which
project_extracharges:
  description: The `project_extracharges` table stores details about additional charges
    associated with specific projects. It includes fields for project identifiers,
    charge descriptions, amounts, and any relevant timestamps or categories. This
    table helps track and manage costs that exceed the initial project
  fields:
    id:
      type: bigint
      description: The 'id' field in the 'project_extracharges' table is a unique
        identifier of type 'bigint' that serves as the primary key for the table.
        It is used to uniquely distinguish each record of additional charges associated
        with projects.
    name:
      type: varchar(150)
      description: The 'name' field in the 'project_extracharges' table is a variable
        character string with a maximum length of 150 characters. It is used to store
        the name or description of the extra charge associated with a project.
project_inroofemployee:
  description: The `project_inroofemployee` table stores information about employees
    assigned to specific projects within the InRoof department. It includes details
    such as employee identifiers, project IDs, roles, and assignment dates, enabling
    the tracking of employee contributions and project involvement.
  fields:
    id:
      type: bigint
      description: The 'id' field in the 'project_inroofemployee' table is of type
        'bigint' and serves as the unique identifier for each record in the table.
        It ensures that each entry can be distinctly referenced and tracked.
    created_at:
      type: datetime(6)
      description: The `created_at` field in the `project_inroofemployee` table records
        the date and time when a record was created. It is stored as a datetime value
        with precision up to six decimal places, allowing for high-resolution timestamps.
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_inroofemployee' table stores
        the timestamp of the last update made to the record, including fractional
        seconds (up to 6 digits). It is used to track when changes were made to the
        data,
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_inroofemployee' table is
        a tiny integer (1) that indicates the active status of an employee in the
        project. A value of '1' signifies that the employee is currently active, while
        a
    color_code:
      type: varchar(150)
      description: The 'color_code' field in the 'project_inroofemployee' table is
        a varchar data type with a maximum length of 150 characters. It is used to
        store a string representation of a color code, which may be utilized for categorizing
        or
    wallet_amount:
      type: double
      description: The 'wallet_amount' field in the 'project_inroofemployee' table
        stores the current balance of funds available to the employee, represented
        as a double-precision floating-point number. This amount may reflect earnings,
        expenses, or adjustments made to the employee
    created_by_id:
      type: int
      description: The `created_by_id` field in the `project_inroofemployee` table
        is of type `int` and stores the unique identifier of the user or entity that
        created the record. This field is used for tracking the creator of each entry
        in the
    employee_id:
      type: int
      description: The 'employee_id' field in the 'project_inroofemployee' table is
        of type 'int' and serves as a unique identifier for each employee associated
        with an in-roof project. This field links the employee records to specific
        projects, ensuring accurate
    login_user_id:
      type: int
      description: "**Field: login_user_id**  \n**Type: int**  \n**Description:**\
        \ This field stores the unique identifier (user ID) of the employee associated\
        \ with the project in the 'project_inroofemployee' table. It links the project\
        \ records to"
project_inroofrole:
  description: The `project_inroofrole` table stores associations between projects
    and specific roles related to in-roof activities. It links project identifiers
    with role identifiers, enabling the management of permissions and responsibilities
    assigned to team members involved in various in-roof tasks within each
  fields:
    id:
      type: int
      description: The field 'id' in the 'project_inroofrole' table is an integer
        type that serves as the unique identifier for each record in the table. It
        is typically used as the primary key to distinguish between different entries
        related to project roof roles.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_inroofrole' table is a datetime
        field that captures the exact date and time when a record was created. The
        precision is set to microseconds (6), allowing for high-resolution timestamping.
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_inroofrole' table stores
        the date and time of the last update made to a record, with microsecond precision
        (datetime(6)). This field is typically used for tracking changes and maintaining
        version control
    is_active:
      type: tinyint(1)
      description: The `is_active` field in the `project_inroofrole` table is of type
        `tinyint(1)` and indicates whether a specific inroof role is currently active.
        A value of `1` represents an active role, while a value
    name:
      type: varchar(50)
      description: The 'name' field in the 'project_inroofrole' table is a VARCHAR
        data type with a maximum length of 50 characters. It is used to store the
        name of the in-roof role associated with a project.
    created_by_id:
      type: int
      description: The 'created_by_id' field in the 'project_inroofrole' table is
        an integer that stores the unique identifier of the user who created the record.
        This field is used to track the origin of the entry for auditing and record-keeping
        purposes
project_inroofrolepermissions:
  description: The 'project_inroofrolepermissions' table stores permission settings
    for different user roles associated with the "InRoof" project. Each record links
    a specific role to its allowed actions or access rights within the project, facilitating
    controlled functionality based on user roles.
  fields:
    id:
      type: int
      description: "**Field: id**  \n**Type: int**  \n**Description:** A unique identifier\
        \ for each record in the `project_inroofrolepermissions` table. This integer\
        \ value serves as the primary key, ensuring that each entry can be distinctly\
        \ referenced."
    accessibility:
      type: json
      description: The 'accessibility' field in the 'project_inroofrolepermissions'
        table is of type 'json' and stores structured data related to the accessibility
        permissions associated with different roles within a project. This field allows
        for flexible and dynamic definitions of permissions,
    role_id:
      type: int
      description: The `role_id` field in the `project_inroofrolepermissions` table
        is of type `int` and represents the unique identifier for a specific role
        associated with permissions in the InRoof project management system. This
        field is used to link roles to
project_inroofrolepermissionsmapping:
  description: The `project_inroofrolepermissionsmapping` table serves as a mapping
    entity that links specific roles to permissions within the context of in-roof
    projects. It defines which roles are granted specific permissions, enabling fine-grained
    access control for users involved in project
  fields:
    id:
      type: int
      description: The 'id' field in the 'project_inroofrolepermissionsmapping' table
        is an integer that uniquely identifies each record in the table. It serves
        as the primary key, ensuring that each entry can be distinctly referenced.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_inroofrolepermissionsmapping'
        table is a datetime(6) type that records the timestamp of when a specific
        record was created. It includes precision for fractional seconds, allowing
        for accurate tracking of creation time
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_inroofrolepermissionsmapping'
        table is a datetime(6) column that stores the timestamp of the last update
        made to the record. This field provides precision up to six decimal places
        for sub-second accuracy
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_inroofrolepermissionsmapping'
        table is a tiny integer (1) that indicates the status of the mapping. A value
        of 1 represents that the mapping is active, while a value of 0
    created_by_id:
      type: int
      description: The field `created_by_id` is an integer that stores the identifier
        of the user who created the entry in the `project_inroofrolepermissionsmapping`
        table. This field is typically used for tracking ownership and accountability
        of the record creation.
    permission_id:
      type: int
      description: The field 'permission_id' is an integer that uniquely identifies
        a specific permission associated with a role in the 'project_inroofrolepermissionsmapping'
        table. It serves as a foreign key linking to the permissions defined in the
        project's permission set.
    role_id:
      type: int
      description: Field 'role_id' in the table 'project_inroofrolepermissionsmapping'
        is an integer that uniquely identifies the role associated with specific permissions
        within the project management context. This field links user roles to their
        corresponding permissions, facilitating access control and role-based
project_inroofrolepermissionstemplate:
  description: The `project_inroofrolepermissionstemplate` table stores templates
    for role-based permissions pertaining to in-roof projects. Each entry defines
    a set of permissions associated with a specific role, allowing for streamlined
    management of access controls and functionalities within project workflows.
  fields:
    id:
      type: bigint
      description: The field 'id' is a unique identifier of type 'bigint' for each
        record in the 'project_inroofrolepermissionstemplate' table. It serves as
        the primary key, distinguishing each entry within the table.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_inroofrolepermissionstemplate'
        table records the exact date and time when the entry was created, with precision
        up to microseconds (datetime(6)).
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_inroofrolepermissionstemplate'
        table is a datetime(6) type that stores the timestamp of the last update made
        to a record. This field captures the exact date and time, including microsecond
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_inroofrolepermissionstemplate'
        table is a tiny integer (1) that indicates the active status of a role permission
        template. A value of '1' signifies that the template is currently active,
    module:
      type: varchar(50)
      description: The 'module' field in the 'project_inroofrolepermissionstemplate'
        table stores the name of the module associated with the permission template.
        It is a variable character field with a maximum length of 50 characters. This
        field helps to identify which
    accessibility:
      type: json
      description: The 'accessibility' field in the 'project_inroofrolepermissionstemplate'
        table is of type JSON and stores configuration details related to user access
        permissions for specific roles within the project. This field can contain
        structured data that defines which features or resources
    created_by_id:
      type: int
      description: The 'created_by_id' field is an integer that stores the unique
        identifier of the user who created the record in the 'project_inroofrolepermissionstemplate'
        table. This field helps track the origin of the entry for auditing and management
        purposes.
project_inrooftransporterbill:
  description: The `project_inrooftransporterbill` table stores information related
    to billing for in-roof transportation services associated with specific projects.
    It includes fields that capture details such as bill amounts, associated project
    identifiers, transport dates, and relevant invoicing data to
  fields:
    id:
      type: bigint
      description: The 'id' field in the 'project_inrooftransporterbill' table is
        a unique identifier of type 'bigint' that serves as the primary key for each
        record in the table. It ensures distinct identification of transport bills
        related to projects.
    voucher_no:
      type: varchar(50)
      description: The field 'voucher_no' in the 'project_inrooftransporterbill' table
        is a variable character string with a maximum length of 50 characters. It
        is used to store the unique identifier for the voucher associated with the
        transporter bill, allowing for
    bill_doc:
      type: varchar(250)
      description: The 'bill_doc' field in the 'project_inrooftransporterbill' table
        stores the document reference or identifier related to billing for the inroof
        transporter project. It is a variable character field with a maximum length
        of 250 characters, allowing for
    bill_no:
      type: varchar(50)
      description: The field 'bill_no' in the table 'project_inrooftransporterbill'
        is a variable character string with a maximum length of 50 characters. It
        uniquely identifies each billing entry related to the in-roof transporter
        project, allowing for easy reference
    gst_percentage:
      type: double
      description: The 'gst_percentage' field in the 'project_inrooftransporterbill'
        table represents the Goods and Services Tax (GST) rate applicable to the billing
        amount. It is stored as a double-precision floating-point number, allowing
        for precise representation of
    bill_amt:
      type: double
      description: The field 'bill_amt' in the 'project_inrooftransporterbill' table
        represents the total amount billed for transportation services, stored as
        a double data type to accommodate fractional values and ensure precision in
        financial calculations.
    date:
      type: datetime(6)
      description: The 'date' field in the 'project_inrooftransporterbill' table stores
        the date and time when the transport bill was generated or recorded. It is
        of type 'datetime(6)', which allows for precision up to six fractional seconds.
    remark:
      type: longtext
      description: The 'remark' field in the 'project_inrooftransporterbill' table
        is of type 'longtext' and is used to store detailed comments or notes regarding
        the transportation bill. This field allows for extensive input, enabling users
        to provide additional context
    transportation_details_id:
      type: bigint
      description: The field `transportation_details_id` is a bigint that serves as
        a unique identifier for each record associated with transportation details
        in the `project_inrooftransporterbill` table. It links to specific transportation
        data relevant to the billing information for in-ro
project_inrooftransporterpayment:
  description: The `project_inrooftransporterpayment` table stores payment details
    related to in-roof transporter services for various projects. It includes records
    of transactions, including payment amounts, dates, associated project identifiers,
    and payment statuses, enabling efficient tracking and management of
  fields:
    id:
      type: bigint
      description: "**Field: `id`**  \n**Type:** `bigint`  \n**Description:** A unique\
        \ identifier for each record in the `project_inrooftransporterpayment` table.\
        \ This field serves as the primary key, ensuring that each payment entry"
    payment_mode:
      type: varchar(25)
      description: The 'payment_mode' field in the 'project_inrooftransporterpayment'
        table is a varchar type with a maximum length of 25 characters. It indicates
        the method used for payment, such as credit card, cash, bank transfer, or
        other
    reference_id:
      type: varchar(50)
      description: The `reference_id` field in the `project_inrooftransporterpayment`
        table is a varchar column with a maximum length of 50 characters. It is used
        to store a unique identifier or reference associated with a specific transporter
        payment transaction within the project
    tds_amount:
      type: double
      description: "**Field Name:** tds_amount  \n**Type:** double  \n**Description:**\
        \ Represents the tax deducted at source (TDS) amount applicable to the payment\
        \ made for in-roof transporter services within the project. This field stores\
        \ a numerical value that indicates"
    date:
      type: datetime(6)
      description: "**Field: date**  \n**Type: datetime(6)**  \n**Description:** This\
        \ field stores the date and time when the payment was processed for the in-roof\
        \ transporter in the project. The precision of 6 indicates that it includes\
        \ fractions of"
    payable_amt:
      type: double
      description: The field 'payable_amt' in the 'project_inrooftransporterpayment'
        table represents the amount of money that is payable for transportation services
        related to the project. It is stored as a double data type to accommodate
        decimal values, allowing for precise
    remark:
      type: longtext
      description: The 'remark' field in the 'project_inrooftransporterpayment' table
        is a longtext data type designed to store additional comments or notes related
        to the payment for in-roof transporter services. This field can accommodate
        extensive text, allowing for detailed
    payment_received_bank_id:
      type: int
      description: '**Field Description:**


        `payment_received_bank_id`: This integer field stores the unique identifier
        of the bank that received the payment for the project. It links to the corresponding
        bank record in the database, allowing for tracking and verification of payment
        transactions.'
    transporter_bill_id:
      type: bigint
      description: The field `transporter_bill_id` is a bigint data type that uniquely
        identifies a transporter's billing record associated with a payment in the
        `project_inrooftransporterpayment` table.
project_inventoryledger:
  description: The `project_inventoryledger` table records detailed transactional
    data related to inventory movements within specific projects. It tracks additions
    and subtractions of inventory items, including quantities, dates, related project
    identifiers, and transaction types. This table enables accurate monitoring of
    inventory levels
  fields:
    id:
      type: int
      description: The 'id' field in the 'project_inventoryledger' table is an integer
        that serves as a unique identifier for each record in the ledger. It is used
        to distinguish individual entries and facilitate data retrieval and management
        within the inventory system.
    transaction_type:
      type: varchar(14)
      description: The 'transaction_type' field in the 'project_inventoryledger' table
        is a varchar(14) data type that stores a code or label indicating the nature
        of the transaction (e.g., 'purchase', 'sale', 'adjustment'). This field
    invoice_date:
      type: date
      description: The 'invoice_date' field in the 'project_inventoryledger' table
        stores the date when an invoice was issued for a particular transaction related
        to project inventory. This field is of type 'date' and is used to track the
        timing of invoicing for
    document_id:
      type: varchar(100)
      description: The field 'document_id' in the 'project_inventoryledger' table
        is a variable character string type with a maximum length of 100 characters.
        It uniquely identifies each document related to the inventory transactions
        in the project ledger.
    vendor_id:
      type: int
      description: The `vendor_id` field in the `project_inventoryledger` table is
        an integer that uniquely identifies the vendor associated with each transaction
        in the inventory ledger. It serves as a foreign key linking to the vendor's
        details in the related vendor table.
    invoice_amount:
      type: double
      description: The 'invoice_amount' field in the 'project_inventoryledger' table
        represents the total monetary value of an invoice, recorded as a double-precision
        floating-point number. This field is used to track the financial amount associated
        with inventory transactions within a project.
    remark:
      type: longtext
      description: The 'remark' field in the 'project_inventoryledger' table is a
        long text field designed to store detailed notes, comments, or observations
        related to inventory transactions. It allows for extensive input and can accommodate
        complex information regarding each transaction's context or specifics
    stock_in_date:
      type: date
      description: The 'stock_in_date' field in the 'project_inventoryledger' table
        records the date when stock items are received and entered into the inventory
        system. This date helps track inventory levels and manage stock movement effectively.
    invoice_doc:
      type: varchar(250)
      description: The field 'invoice_doc' in the 'project_inventoryledger' table
        is a VARCHAR(250) type that stores the document identifier or reference number
        associated with an invoice related to project inventory transactions. It can
        hold up to 250 characters, allowing for
    po_no:
      type: varchar(100)
      description: The 'po_no' field in the 'project_inventoryledger' table is a variable
        character (varchar) field with a maximum length of 100 characters. It is used
        to store the purchase order number associated with inventory transactions
        within a project.
project_inventoryledgerproductdetails:
  description: The `project_inventoryledgerproductdetails` table stores detailed information
    about products within an inventory ledger for specific projects. It captures attributes
    such as product identification, quantities, unit costs, and project associations
    to facilitate accurate tracking of product usage and inventory management across
    various
  fields:
    id:
      type: int
      description: "**Field: id**  \n**Type:** int  \n**Description:** A unique identifier\
        \ for each entry in the 'project_inventoryledgerproductdetails' table. This\
        \ field serves as the primary key and is used to distinguish individual records\
        \ within the table."
    quantity:
      type: json
      description: The 'quantity' field in the 'project_inventoryledgerproductdetails'
        table is of type 'json' and is used to store detailed information about the
        quantities of products in various formats. This field allows for the inclusion
        of multiple quantity records, accommodating different
    balance_quantity:
      type: json
      description: The `balance_quantity` field in the `project_inventoryledgerproductdetails`
        table is of type JSON. It stores the current balance quantities of various
        inventory items, organized in a structured format. Each entry may include
        attributes such as item IDs, their corresponding
    inventory_ledger_id:
      type: int
      description: The 'inventory_ledger_id' field is an integer that uniquely identifies
        a record in the inventory ledger. It serves as a foreign key linking to the
        corresponding inventory ledger entry, facilitating the organization and management
        of product details associated with specific inventory transactions in the
    product_id:
      type: int
      description: "**Field:** `product_id`  \n**Type:** `int`  \n**Description:**\
        \ This field uniquely identifies each product in the inventory ledger, serving\
        \ as a foreign key that links to the corresponding product details in the\
        \ product catalog."
    unit_price:
      type: double
      description: The 'unit_price' field in the 'project_inventoryledgerproductdetails'
        table represents the price per unit of a product recorded in the inventory
        ledger. It is stored as a double data type to accommodate decimal values,
        allowing for accurate representation of prices.
    merged_into_id:
      type: bigint
      description: The field 'merged_into_id' in the 'project_inventoryledgerproductdetails'
        table is a bigint that references the unique identifier of another record
        within the same table, indicating that the current record has been merged
        into the specified record.
project_invoices:
  description: The `project_invoices` table stores information related to invoices
    issued for various projects. It includes details such as invoice number, project
    ID, client ID, invoice date, due date, total amount, payment status, and any applicable
    tax information. This
  fields:
    id:
      type: bigint
      description: The 'id' field in the 'project_invoices' table is a unique identifier
        of type 'bigint' that serves as the primary key for each invoice record, ensuring
        distinct identification across all entries.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_invoices' table stores the
        date and time when the invoice record was created. It is of type 'datetime(6)',
        allowing for precision up to six decimal places for fractional seconds.
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_invoices' table records
        the timestamp of the most recent update made to the invoice entry. It is of
        type 'datetime(6)', allowing for precise tracking of updates down to microsecond
        accuracy.
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_invoices' table is a tinyint(1)
        that indicates the current status of the invoice. A value of 1 represents
        an active invoice, while a value of 0 denotes an inactive or
    invoice_no:
      type: varchar(150)
      description: The 'invoice_no' field in the 'project_invoices' table stores a
        unique identifier for each invoice as a string of up to 150 characters. It
        is used to track and reference specific invoices associated with projects.
    invoice_amount_without_gst:
      type: double
      description: "**Field:** invoice_amount_without_gst  \n**Type:** double  \n\
        **Description:** This field stores the total amount of the invoice excluding\
        \ Goods and Services Tax (GST). It represents the net amount to be billed\
        \ for a project before any applicable taxes are"
    invoice_amount_with_gst:
      type: double
      description: "**Field:** `invoice_amount_with_gst`  \n**Type:** Double  \n**Description:**\
        \ This field stores the total amount of the invoice, including Goods and Services\
        \ Tax (GST). It represents the final payable amount after adding GST to the\
        \ base invoice"
    invoice_date:
      type: date
      description: "**Field:** `invoice_date`  \n**Type:** Date  \n**Description:**\
        \ The date when the invoice was issued for a project. This date is used to\
        \ track billing periods and payment schedules."
    invoice_doc:
      type: varchar(200)
      description: The 'invoice_doc' field in the 'project_invoices' table stores
        the filename or reference to an invoice document as a string with a maximum
        length of 200 characters. This field is used to link or identify the associated
        invoice for each project.
    remark:
      type: longtext
      description: The 'remark' field in the 'project_invoices' table is a longtext
        data type that stores additional comments or notes related to the invoice.
        This can include explanations, special instructions, or any other relevant
        information that does not fit within standard invoice
    created_by_id:
      type: int
      description: The 'created_by_id' field in the 'project_invoices' table is an
        integer that stores the unique identifier of the user who created the invoice.
        This field is used to track the origin of the invoice for auditing and accountability
        purposes.
    project_id:
      type: bigint
      description: The `project_id` field is of type `bigint` and serves as a unique
        identifier for each project in the `project_invoices` table. It links invoices
        to their corresponding projects, enabling the organization and retrieval of
        financial data related to specific
    status:
      type: varchar(50)
      description: The 'status' field in the 'project_invoices' table is a string
        value (up to 50 characters) that indicates the current status of the invoice,
        such as 'Pending', 'Paid', 'Overdue', or 'Cancelled'. This
    packing_list_no_id:
      type: bigint
      description: The field 'packing_list_no_id' in the 'project_invoices' table
        is of type 'bigint' and stores a unique identifier for the associated packing
        list. This ID links the invoice to a specific packing list, facilitating organization
        and tracking of
    vendor_id:
      type: bigint
      description: "**Field:** vendor_id  \n**Type:** bigint  \n**Description:** This\
        \ field stores the unique identifier for the vendor associated with the invoice\
        \ in the 'project_invoices' table. It links each invoice to a specific vendor,\
        \ facilitating vendor-related data management"
    delivered_at:
      type: datetime(6)
      description: The 'delivered_at' field in the 'project_invoices' table records
        the exact date and time when an invoice was delivered to the client. It is
        stored as a datetime with microsecond precision (datetime(6)).
    delivered_by_id:
      type: int
      description: The field 'delivered_by_id' in the 'project_invoices' table is
        an integer that references the unique identifier of the user or entity responsible
        for delivering the invoice. This field establishes a relationship between
        the invoice and the deliverer, allowing for
    received_at:
      type: datetime(6)
      description: The 'received_at' field in the 'project_invoices' table records
        the exact date and time when an invoice was received. It is stored as a datetime
        value with microsecond precision (6), allowing for detailed timestamping of
        invoice reception.
    received_by_id:
      type: int
      description: The 'received_by_id' field in the 'project_invoices' table is an
        integer that stores the unique identifier of the user or employee who received
        the invoice. This field is used to track accountability and manage invoice
        processing activities.
    delivery_challan_amount_with_gst:
      type: double
      description: "**Field:** delivery_challan_amount_with_gst  \n**Type:** double\
        \  \n**Description:** This field represents the total amount of the delivery\
        \ challan, including Goods and Services Tax (GST). It is a floating-point\
        \ number that captures the monetary value"
    delivery_challan_amount_without_gst:
      type: double
      description: "**Field**: `delivery_challan_amount_without_gst`  \n**Type**:\
        \ Double  \n**Description**: This field represents the amount of the delivery\
        \ challan without including Goods and Services Tax (GST). It is used to capture\
        \ the net"
    delivery_challan_date:
      type: date
      description: The field 'delivery_challan_date' in the 'project_invoices' table
        represents the date on which the delivery challan was issued for a specific
        project invoice. This date is crucial for tracking the timing of deliveries
        and ensures proper documentation in the invo
    delivery_challan_doc:
      type: varchar(200)
      description: The field 'delivery_challan_doc' in the 'project_invoices' table
        is a VARCHAR(200) type that stores the filename or path of the delivery challan
        document associated with the invoice. This field is used to reference related
        delivery documentation for
    delivery_challan_no:
      type: varchar(50)
      description: "**Field: delivery_challan_no**  \n**Type:** varchar(50)  \n**Description:**\
        \ This field stores the unique delivery challan number associated with the\
        \ invoice, allowing for tracking and reference of goods delivered in relation\
        \ to the billed project."
    vendor_invoice_amount_with_gst:
      type: double
      description: "**Field:** `vendor_invoice_amount_with_gst`  \n**Type:** Double\
        \  \n**Description:** This field stores the total amount of the vendor's invoice,\
        \ including Goods and Services Tax (GST). It represents the final payable\
        \ amount that the project incurs"
    vendor_invoice_amount_without_gst:
      type: double
      description: "**Field:** `vendor_invoice_amount_without_gst`  \n**Type:** Double\
        \  \n**Description:** This field stores the total amount of the vendor's invoice\
        \ excluding Goods and Services Tax (GST). It represents the net amount payable\
        \ to the vendor for the"
    vendor_invoice_date:
      type: date
      description: The field 'vendor_invoice_date' in the 'project_invoices' table
        stores the date on which the vendor's invoice was issued. This date is used
        for tracking and record-keeping purposes related to invoice processing within
        projects.
    vendor_invoice_doc:
      type: varchar(200)
      description: The field 'vendor_invoice_doc' in the 'project_invoices' table
        holds a string (up to 200 characters) that represents the filename or document
        path of the vendor's invoice associated with a specific project invoice.
    vendor_invoice_no:
      type: varchar(50)
      description: The field `vendor_invoice_no` in the `project_invoices` table stores
        the invoice number issued by the vendor, allowing for up to 50 characters.
        This field is used to uniquely identify and reference the vendor's invoice
        associated with a specific project
    sg_invoice_amount_with_gst:
      type: double
      description: "**Field:** sg_invoice_amount_with_gst  \n**Type:** double  \n\
        **Description:** This field represents the total amount of the invoice, including\
        \ Goods and Services Tax (GST). It is used to store the final charge billed\
        \ to the client for services"
    sg_invoice_amount_without_gst:
      type: double
      description: The field 'sg_invoice_amount_without_gst' in the 'project_invoices'
        table stores the total invoice amount for a project, excluding any Goods and
        Services Tax (GST). This value is represented as a double data type to accommodate
        fractional amounts.
    sg_invoice_date:
      type: date
      description: "**Field: sg_invoice_date**  \n**Type:** Date  \n**Description:**\
        \ This field records the date on which the invoice was issued for the project.\
        \ It is used to track billing timelines and financial records associated with\
        \ the project invoices."
    sg_invoice_doc:
      type: varchar(200)
      description: The field 'sg_invoice_doc' in the 'project_invoices' table stores
        the document identifier or file name of the sales goods invoice, represented
        as a variable character string with a maximum length of 200 characters.
    sg_invoice_no:
      type: varchar(50)
      description: The field 'sg_invoice_no' in the 'project_invoices' table is a
        VARCHAR type with a maximum length of 50 characters. It is used to store the
        unique invoice number associated with a project invoice, which helps in identifying
        and referencing specific
    sg_delivery_challan_amount_with_gst:
      type: double
      description: "**Field:** sg_delivery_challan_amount_with_gst  \n**Type:** double\
        \  \n**Description:** This field stores the amount of the delivery challan\
        \ including Goods and Services Tax (GST) associated with the invoice in the\
        \ project. It represents the total"
    sg_delivery_challan_amount_without_gst:
      type: double
      description: "**Field Name:** sg_delivery_challan_amount_without_gst  \n**Type:**\
        \ double  \n**Description:** This field stores the amount of the delivery\
        \ challan associated with the project invoice, excluding Goods and Services\
        \ Tax (GST). The value is represented as"
    sg_delivery_challan_date:
      type: date
      description: The field 'sg_delivery_challan_date' in the 'project_invoices'
        table represents the date when the delivery challan was issued for a specific
        project invoice. It is of type 'date' and is used to track the delivery schedule
        related to
    sg_delivery_challan_doc:
      type: varchar(200)
      description: The field 'sg_delivery_challan_doc' in the 'project_invoices' table
        stores a reference or path to a delivery challan document, limited to 200
        characters in length. This field is used to associate relevant delivery documentation
        with specific project invoices
    sg_delivery_challan_no:
      type: varchar(50)
      description: "**Field:** sg_delivery_challan_no  \n**Type:** varchar(50)  \n\
        **Description:** This field stores the delivery challan number associated\
        \ with the project invoice, used for tracking and referencing shipments related\
        \ to the invoice. It has a maximum length"
project_invoicesitems:
  description: The `project_invoicesitems` table stores detailed records of invoice
    items associated with specific projects. Each entry includes information such
    as the item description, quantity, unit price, and total amount, enabling accurate
    tracking and management of project-related financials. This
  fields:
    id:
      type: bigint
      description: The 'id' field in the 'project_invoicesitems' table is a unique
        identifier of type 'bigint' for each invoice item entry. It serves as the
        primary key, ensuring that each record can be uniquely referenced within the
        table.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_invoicesitems' table stores
        the date and time when the invoice item was created, with precision up to
        six decimal places for fractional seconds.
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_invoicesitems' table is
        a datetime column that records the precise date and time (with microsecond
        precision) when the invoice item was last updated. This helps track changes
        and modifications to the invoice items
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_invoicesitems' table is a
        tiny integer that indicates the active status of an invoice item. A value
        of 1 typically means the item is active and 0 means it is inactive.
    quantity:
      type: double
      description: The 'quantity' field in the 'project_invoicesitems' table represents
        the numeric amount of items or units associated with a specific invoice item.
        It is stored as a double to accommodate fractional values, allowing for precise
        calculations of quantities relating to invoiced
    unit_price:
      type: double
      description: "**Field:** unit_price  \n**Type:** double  \n**Description:**\
        \ Represents the price of a single unit of the item in the invoice. This value\
        \ is used to calculate the total cost by multiplying it with the quantity\
        \ of items billed."
    taxable_amount:
      type: double
      description: The 'taxable_amount' field in the 'project_invoicesitems' table
        represents the portion of the invoice item amount that is subject to taxation.
        It is stored as a double, allowing for precise monetary values.
    tax_rate:
      type: double
      description: "**Field Name:** tax_rate  \n**Type:** double  \n**Description:**\
        \ Represents the tax rate applied to the invoice item, expressed as a decimal.\
        \ For example, a tax rate of 0.07 indicates a 7% tax. This field"
    tax_amount:
      type: double
      description: The 'tax_amount' field in the 'project_invoicesitems' table represents
        the monetary value of taxes applied to a specific invoice item. It is stored
        as a double-precision floating-point number to accommodate decimal values
        and ensure accurate calculations.
    total_amount:
      type: double
      description: The 'total_amount' field in the 'project_invoicesitems' table is
        a double-precision floating-point number that represents the total monetary
        amount for the invoice item, including any applicable taxes and discounts.
    description:
      type: longtext
      description: The 'description' field in the 'project_invoicesitems' table stores
        a detailed narrative or commentary about the specific invoice item. It can
        contain lengthy text and is intended to provide additional information or
        context related to the item, such as work performed,
    created_by_id:
      type: int
      description: "**Field:** `created_by_id`  \n**Type:** `int`  \n**Description:**\
        \ This field stores the unique identifier of the user who created the invoice\
        \ item. It references the user in the system, allowing for tracking of the\
        \ origin of the"
    project_bom_item_id:
      type: bigint
      description: The field `project_bom_item_id` is of type `bigint` in the `project_invoicesitems`
        table. It serves as a unique identifier that links to a specific item in the
        project's Bill of Materials (BOM), enabling tracking
    project_invoice_id:
      type: bigint
      description: The field `project_invoice_id` is of type 'bigint' in the `project_invoicesitems`
        table. It serves as a foreign key that uniquely identifies the associated
        project invoice for each invoice item, linking it to the corresponding entry
        in the
    unit_id:
      type: bigint
      description: The `unit_id` field in the `project_invoicesitems` table is a bigint
        data type that uniquely identifies the unit associated with each invoice item.
        It establishes a link to the corresponding unit record, facilitating the tracking
        of items in relation to their
    packing_list_item_id:
      type: bigint
      description: The field `packing_list_item_id` of type `bigint` in the `project_invoicesitems`
        table uniquely identifies each item associated with a packing list within
        an invoice context.
    delivered_quantity:
      type: double
      description: The 'delivered_quantity' field in the 'project_invoicesitems' table
        represents the quantity of items that have been delivered for a particular
        invoice item. It is stored as a double data type to accommodate fractional
        values, allowing for precise quantities to be
    dispatched_quantity:
      type: double
      description: The field 'dispatched_quantity' in the 'project_invoicesitems'
        table represents the quantity of items that have been dispatched for a specific
        invoice line item. It is stored as a double data type to accommodate decimal
        values, allowing for precise measurements of
project_invoicetransportationdetails:
  description: The `project_invoicetransportationdetails` table stores information
    related to the transportation details for invoices associated with specific projects.
    This table may include fields such as the invoice ID, project ID, transportation
    method, cost, date of transport,
  fields:
    id:
      type: bigint
      description: "**Field Name:** id  \n**Type:** bigint  \n**Description:** A unique\
        \ identifier for each record in the project_invoicetransportationdetails table.\
        \ This field serves as the primary key, ensuring that each entry can be distinctly\
        \ referenced."
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_invoicetransportationdetails'
        table stores the timestamp indicating when a specific record was created.
        It is of type 'datetime(6)', allowing for storage of date and time down to
        micro
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_invoicetransportationdetails'
        table records the timestamp of the last update to the record, including milliseconds
        precision. It is of type 'datetime(6)', allowing for accurate tracking of
        modifications
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_invoicetransportationdetails'
        table is a tinyint(1) type that indicates the active status of a transportation
        detail. A value of 1 signifies that the record is currently active
    vehicle_or_docket_no:
      type: varchar(50)
      description: The field 'vehicle_or_docket_no' in the 'project_invoicetransportationdetails'
        table stores a reference number, which can either be the vehicle identification
        number or the transportation docket number, represented as a string with a
        maximum length
    vehicle_size:
      type: varchar(250)
      description: "**Field: vehicle_size**  \n**Type: varchar(250)**  \n**Description:**\
        \ This field stores the size of the vehicle used for transportation in the\
        \ project, allowing for a maximum length of 250 characters. It may include\
        \ information such as dimensions"
    eway_bill_doc:
      type: varchar(200)
      description: The field 'eway_bill_doc' in the 'project_invoicetransportationdetails'
        table is of type 'varchar(200)' and is used to store the document identification
        number or reference related to the e-way bill for transportation details of
    eway_bill_no:
      type: varchar(250)
      description: The field 'eway_bill_no' in the table 'project_invoicetransportationdetails'
        is a varchar type with a maximum length of 250 characters. It stores the unique
        invoice number assigned to an e-way bill for tracking and documentation
    lr_doc:
      type: varchar(200)
      description: The field 'lr_doc' in the 'project_invoicetransportationdetails'
        table is a varchar(200) data type that stores the document reference number
        or identification for the loading receipt (LR) associated with transportation
        details in a project
    lr_no:
      type: varchar(250)
      description: The field 'lr_no' in the 'project_invoicetransportationdetails'
        table is a varchar(250) type used to store the Logistics Receipt Number, which
        uniquely identifies a specific transportation transaction related to the project.
        This field can
    dispatch_date:
      type: date
      description: The field 'dispatch_date' in the table 'project_invoicetransportationdetails'
        stores the date on which the transportation of goods related to a project
        is dispatched. This date is crucial for tracking shipment timelines and ensuring
        timely delivery.
    remark:
      type: longtext
      description: The 'remark' field in the 'project_invoicetransportationdetails'
        table is a longtext data type that stores additional comments or notes related
        to transportation details for a project. This field allows for extensive descriptions
        or observations that are relevant
    created_by_id:
      type: int
      description: The `created_by_id` field in the `project_invoicetransportationdetails`
        table is an integer that identifies the user or system account that created
        the record. This field is used to track the origin of the data entry for accountability
    dispatched_by_id:
      type: int
      description: The `dispatched_by_id` field in the `project_invoicetransportationdetails`
        table is an integer that identifies the user or entity responsible for dispatching
        the transportation associated with the project invoice. This field serves
        as a foreign key
    invoice_id:
      type: bigint
      description: The field 'invoice_id' is a bigint type that uniquely identifies
        each invoice in the 'project_invoicetransportationdetails' table. It serves
        as a reference key to link transportation details to the corresponding invoice.
    transporter_id:
      type: int
      description: The 'transporter_id' field is an integer that uniquely identifies
        the transporter associated with the transportation details in the 'project_invoicetransportationdetails'
        table. It serves as a foreign key linking to the transporter's record in a
        related
    transportation_cost:
      type: double
      description: The 'transportation_cost' field in the 'project_invoicetransportationdetails'
        table represents the total cost incurred for transportation related to a specific
        project. This field is of type 'double' to accommodate values that may include
        decimal points
project_manufacturer:
  description: The `project_manufacturer` table stores information about manufacturers
    associated with various projects. Each record includes identifiers for the project
    and the manufacturer, allowing for the tracking and management of relationships
    between specific projects and their respective manufacturers.
  fields:
    id:
      type: bigint
      description: The 'id' field in the 'project_manufacturer' table is a unique
        identifier of type 'bigint'. It serves as the primary key, ensuring that each
        record in the table can be distinctly identified.
    created_at:
      type: datetime(6)
      description: The `created_at` field in the `project_manufacturer` table stores
        the date and time when a record was created, with precision up to microseconds
        (datetime(6)). This timestamp is typically used for tracking the creation
        time of each entry in
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_manufacturer' table stores
        the timestamp of the last update made to a record, with a precision of up
        to six decimal places for fractional seconds. This field helps track when
        the record was most recently modified
    is_active:
      type: tinyint(1)
      description: The 'is_active' field is a boolean indicator represented as a tinyint(1)
        in the 'project_manufacturer' table. It signifies whether a manufacturer is
        currently active (1) or inactive (0) within the project context.
    name:
      type: varchar(150)
      description: The 'name' field in the 'project_manufacturer' table is a variable
        character string with a maximum length of 150 characters. It stores the name
        of the manufacturer associated with a project, allowing for identification
        and differentiation among various manufacturers.
    created_by_id:
      type: int
      description: The `created_by_id` field in the `project_manufacturer` table is
        an integer that stores the unique identifier of the user or system account
        that created the corresponding record. This field helps track the origin of
        the entry for auditing and accountability purposes.
project_permission:
  description: The `project_permission` table manages the permission settings related
    to user access and actions within specific projects. It typically includes fields
    that associate users with projects and define the level of access granted, such
    as read, write, or administrative rights. This table is
  fields:
    id:
      type: int
      description: The 'id' field in the 'project_permission' table is an integer
        that uniquely identifies each record within the table. It serves as the primary
        key, ensuring that each project permission entry is distinct.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_permission' table stores
        the timestamp of when the permission record was created. It is of type 'datetime(6)',
        which includes fractional seconds for greater precision.
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_permission' table records
        the timestamp of the last update made to the record, storing precise time
        information with microsecond precision (up to 6 digits). This field helps
        track when any changes to the project
    is_active:
      type: tinyint(1)
      description: The `is_active` field in the `project_permission` table is a boolean
        indicator that specifies whether a project permission is currently active.
        It is represented as a tiny integer (1 for true/active and 0 for false/inactive).
    name:
      type: varchar(200)
      description: The 'name' field in the 'project_permission' table is a variable
        character string with a maximum length of 200 characters. It is used to store
        the name of the permission associated with a project, helping to identify
        and categorize different levels of access
    created_by_id:
      type: int
      description: The field 'created_by_id' is an integer that stores the identifier
        of the user who created the record in the 'project_permission' table. This
        field establishes a relationship between the permission record and the user
        responsible for its creation, facilitating auditing and accountability
project_pojectsiteimage:
  description: The `project_pojectsiteimage` table stores images associated with specific
    project sites. Each entry corresponds to a particular project site and includes
    fields for storing the image data, file format, and any relevant metadata (e.g.,
    image description, uploading date
  fields:
    id:
      type: int
      description: The field 'id' in the table 'project_pojectsiteimage' is an integer
        that serves as the unique identifier for each record in the table, ensuring
        that each project site image can be distinctly referenced.
    url:
      type: varchar(250)
      description: The 'url' field in the 'project_pojectsiteimage' table stores the
        web address (URL) of the project site image as a variable character string,
        with a maximum length of 250 characters. This field is used to link to the
    project_site_visit_id:
      type: int
      description: The field 'project_site_visit_id' is an integer that serves as
        a unique identifier for each site visit associated with a project in the 'project_pojectsiteimage'
        table. This ID links the images to specific site visits, enabling organized
        data retrieval
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_pojectsiteimage' table is
        a tiny integer (1) that indicates the status of the project site image. A
        value of '1' signifies that the image is active and should be displayed,
project_product:
  description: The 'project_product' table stores the association between projects
    and the products associated with them. It includes fields that define the unique
    identifiers for both projects and products, along with any relevant attributes
    that describe the relationship, such as quantity, status, or role
  fields:
    id:
      type: bigint
      description: The 'id' field in the 'project_product' table is a unique identifier
        of type 'bigint'. It is used to uniquely distinguish each record within the
        table, ensuring that every product associated with a project can be accurately
        referenced and managed.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_product' table stores the
        date and time when the record was created. It is of type 'datetime(6)', which
        allows for precision up to six decimal places, enabling the storage of timestamps
        down to
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_product' table records the
        timestamp of the last update made to the associated entry. It is stored in
        datetime format with precision up to six fractional seconds, allowing for
        accurate tracking of modifications over time.
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_product' table is a tiny
        integer (1) that indicates the active status of a product related to a project.
        A value of 1 signifies that the product is currently active, while a value
        of
    product_code:
      type: varchar(150)
      description: The `product_code` field in the `project_product` table is a variable
        character string with a maximum length of 150 characters. It serves as a unique
        identifier for each product, allowing for easy reference and organization
        within the project database.
    name:
      type: varchar(150)
      description: "**Field: name**  \n**Type:** varchar(150)  \n**Description:**\
        \ Stores the name of the product associated with the project, with a maximum\
        \ length of 150 characters. This field serves as a textual identifier for\
        \ the product within the project"
    description:
      type: longtext
      description: The 'description' field in the 'project_product' table is of type
        'longtext' and is used to store a detailed textual description of a product
        associated with a project. This field can accommodate large amounts of text,
        allowing for comprehensive elaboration
    hsn_code:
      type: varchar(20)
      description: The 'hsn_code' field in the 'project_product' table is a VARCHAR
        type with a maximum length of 20 characters. It stores the Harmonized System
        Nomenclature (HSN) code, which is used to classify goods and services
    gst_rate:
      type: double
      description: The 'gst_rate' field in the 'project_product' table represents
        the Goods and Services Tax rate applicable to the product, stored as a double-precision
        floating point number. This field is used to calculate the tax amount on the
        product's price.
    inventory:
      type: json
      description: The 'inventory' field in the 'project_product' table is of type
        JSON and stores detailed information about the stock levels, availability,
        and attributes of various products associated with a project. This flexible
        structure allows for dynamic data representation, accommodating varying product
        inventory
    created_by_id:
      type: int
      description: The 'created_by_id' field in the 'project_product' table stores
        the unique identifier (integer) of the user or entity that created the project
        product record. This field is used for tracking authorship and ensuring accountability
        in project management.
    type_id:
      type: int
      description: The field 'type_id' in the 'project_product' table is an integer
        that represents the unique identifier for the type of product associated with
        a specific project. It is used to categorize or classify products within the
        project's context.
    drawing:
      type: json
      description: The 'drawing' field in the 'project_product' table is a JSON type
        that stores graphical representations or specifications related to the product.
        It can include details such as design elements, dimensions, and other visual
        data in a structured format.
    data_sheet:
      type: varchar(250)
      description: "**Field: `data_sheet`**  \n**Type:** `varchar(250)`  \n**Description:**\
        \ This field stores a URL or path to a data sheet related to the project product,\
        \ providing additional specifications or documentation, with a maximum length\
        \ of"
    manufacturer_id:
      type: int
      description: The field 'manufacturer_id' is an integer that uniquely identifies
        the manufacturer associated with a specific product in the 'project_product'
        table. This field establishes a relationship between the product and its manufacturer,
        enabling efficient tracking and management of product origins.
    power_rating:
      type: double
      description: The 'power_rating' field in the 'project_product' table stores
        the power rating of a product, measured in watts, as a double precision floating-point
        number. This value indicates the maximum power the product can consume or
        deliver during operation.
    booked_inventory:
      type: json
      description: The 'booked_inventory' field in the 'project_product' table is
        of type JSON and is used to store detailed information about the inventory
        that has been reserved or booked for a specific project product. This field
        may include data such as quantities, dates
    left_inventory_after_booking:
      type: json
      description: The field 'left_inventory_after_booking' in the 'project_product'
        table is a JSON data type that stores detailed information about the inventory
        levels remaining for each product after a booking is made. This field allows
        for flexible representation of inventory quantities across various attributes
    sections:
      type: varchar(50)
      description: The 'sections' field in the 'project_product' table is a variable
        character field with a maximum length of 50 characters. It is used to store
        information about specific sections or categories associated with the project
        product, allowing for organizational and classification purposes.
    is_qr_code_scanable:
      type: tinyint(1)
      description: The field `is_qr_code_scanable` in the `project_product` table
        is a boolean indicator, represented as a tiny integer (1 for true, 0 for false),
        that specifies whether the product is capable of being scanned using a QR
    is_bar_code_scanable:
      type: tinyint(1)
      description: The field `is_bar_code_scanable` in the `project_product` table
        is a tiny integer (1) that indicates whether the product can be scanned using
        a barcode scanner. A value of 1 signifies that the product is scanable, while
    merged_into_id:
      type: bigint
      description: The 'merged_into_id' field in the 'project_product' table is of
        type 'bigint' and stores the identifier of a project product that has been
        merged into another project product. This field is used to indicate the relationship
        between the original product
project_productbooking:
  description: The `project_productbooking` table stores information related to product
    bookings made by users for specific projects. It typically includes fields for
    booking IDs, user IDs, product IDs, booking dates, quantities, and status of each
    booking. This table facilitates tracking of
  fields:
    id:
      type: int
      description: The field 'id' is an integer that serves as the primary key for
        the 'project_productbooking' table. It uniquely identifies each record in
        the table, ensuring that each product booking entry can be distinctly referenced.
    created_at:
      type: datetime(6)
      description: The `created_at` field in the `project_productbooking` table stores
        the timestamp of when a booking record was created. It is of type `datetime(6)`,
        which allows for precision up to 6 decimal places for fractional seconds,
        providing
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_productbooking' table stores
        the date and time when the record was last modified. It uses the 'datetime(6)'
        type to capture fractional seconds, providing precise timestamps for tracking
        updates to the booking entries
    is_active:
      type: tinyint(1)
      description: The `is_active` field is a boolean indicator represented as a tiny
        integer (1 for true, 0 for false) in the `project_productbooking` table. It
        denotes whether a product booking is currently active (1) or not (0
    date:
      type: date
      description: The 'date' field in the 'project_productbooking' table stores the
        specific date associated with a product booking for a project. This field
        is of type 'date' and typically captures the date when the booking was made
        or the date of the event
    booked_inventory:
      type: json
      description: The 'booked_inventory' field in the 'project_productbooking' table
        is a JSON object that stores detailed information about the products that
        have been booked. This field may include attributes such as product IDs, quantities,
        booking dates, and any other relevant
    left_inventory_after_booking:
      type: json
      description: The field 'left_inventory_after_booking' in the 'project_productbooking'
        table stores inventory data in JSON format, reflecting the remaining stock
        levels of products after a booking transaction has been processed. This allows
        for flexible data storage and easy retrieval of inventory details
    created_by_id:
      type: int
      description: The 'created_by_id' field is an integer that stores the unique
        identifier of the user who created the record in the 'project_productbooking'
        table.
    product_id:
      type: int
      description: The field 'product_id' is an integer that uniquely identifies each
        product in the 'project_productbooking' table. It serves as a foreign key
        linking the booking records to the corresponding product details in the products
        table.
    project_id:
      type: int
      description: The 'project_id' field in the 'project_productbooking' table is
        an integer that serves as a unique identifier for each project associated
        with a product booking. It establishes a relationship between the booking
        and the corresponding project, ensuring that each booking can be
    delivered_inventory:
      type: json
      description: The 'delivered_inventory' field in the 'project_productbooking'
        table is a JSON type field that stores detailed information about the inventory
        items that have been delivered for a specific product booking. This may include
        item quantities, descriptions, timestamps, and other
    status:
      type: varchar(50)
      description: The 'status' field in the 'project_productbooking' table is a variable
        character string (varchar) with a maximum length of 50 characters. It is used
        to indicate the current state or condition of a product booking in a project,
        such as
    bom_item_id:
      type: int
      description: The field 'bom_item_id' is an integer that uniquely identifies
        a Bill of Materials (BOM) item associated with a product booking in the 'project_productbooking'
        table. This ID links the booking to specific components or materials required
        for the project
    merged_into_id:
      type: bigint
      description: The 'merged_into_id' field in the 'project_productbooking' table
        is of type 'bigint' and is used to reference the ID of another entry that
        this booking has been merged into. It indicates the parent booking record
        after merging, facilitating
project_productprojecttypemapping:
  description: The `project_productprojecttypemapping` table is used to establish
    relationships between projects and their associated product types within a database.
    It likely contains mappings that link specific projects to different product types,
    enabling efficient categorization and management of products based on their
  fields:
    id:
      type: int
      description: "**Field:** id  \n**Type:** int  \n**Description:** A unique identifier\
        \ for each record in the 'project_productprojecttypemapping' table, used to\
        \ distinguish between different entries and facilitate data retrieval."
    created_at:
      type: datetime(6)
      description: The field `created_at` in the table `project_productprojecttypemapping`
        stores the timestamp of when the record was created. The `datetime(6)` data
        type allows for precision up to microseconds, providing accurate tracking
        of the record's
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_productprojecttypemapping'
        table is a datetime(6) type that records the timestamp of the last update
        made to the corresponding record. This field includes fractional seconds precision,
        allowing for precise tracking of
    is_active:
      type: tinyint(1)
      description: The `is_active` field in the `project_productprojecttypemapping`
        table is a tiny integer (1) that indicates the active status of the project-product
        type mapping. A value of `1` signifies that the mapping is active, while
    project_type:
      type: varchar(20)
      description: The 'project_type' field in the 'project_productprojecttypemapping'
        table is a VARCHAR data type with a maximum length of 20 characters. It is
        used to specify the type of project associated with a particular product,
        allowing for the categor
    created_by_id:
      type: int
      description: The field 'created_by_id' is an integer that stores the unique
        identifier of the user who created the entry in the 'project_productprojecttypemapping'
        table. This field establishes a link to the user responsible for the record's
        creation, facilitating
    product_id:
      type: int
      description: The field **product_id** is an integer that uniquely identifies
        a product within the **project_productprojecttypemapping** table. It serves
        as a foreign key linking to the product details in the corresponding product
        table, facilitating the association between projects and their
    merged_into_id:
      type: bigint
      description: The field `merged_into_id` in the `project_productprojecttypemapping`
        table is of type `bigint`. It stores the unique identifier (ID) of a record
        into which another record has been merged, indicating a relationship between
        the two
project_project:
  description: The `project_project` table stores information related to various projects
    within an organization. It includes fields for project identifiers, names, descriptions,
    start and end dates, status, and associated team members. This table helps in
    managing and tracking the progress and details
  fields:
    id:
      type: bigint
      description: The 'id' field in the 'project_project' table is a unique identifier
        of type 'bigint' that serves as the primary key for each project record. It
        ensures that each project can be distinctly referenced within the database.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_project' table stores the
        date and time (with microsecond precision) when a project entry was created.
    updated_at:
      type: datetime(6)
      description: The `updated_at` field in the `project_project` table is a datetime(6)
        type that stores the timestamp of the last update made to a project record.
        This field includes precision up to microseconds, allowing for precise tracking
        of modifications.
    is_active:
      type: tinyint(1)
      description: The 'is_active' field is a tiny integer (1) that indicates the
        active status of a project. A value of '1' signifies that the project is currently
        active, while a value of '0' indicates that the project is inactive.
    name:
      type: varchar(150)
      description: The 'name' field in the 'project_project' table is of type 'varchar(150)'
        and is used to store the name of the project. It can contain up to 150 characters,
        allowing for descriptive titles that identify the project.
    refrence_number:
      type: varchar(150)
      description: The 'reference_number' field in the 'project_project' table is
        a variable character string (up to 150 characters) that uniquely identifies
        and references a specific project. It is commonly used for tracking, categorization,
        and retrieval purposes.
    start_date:
      type: date
      description: The 'start_date' field in the 'project_project' table represents
        the date when a project officially begins. It is of type 'date' and is used
        to track the initiation point of the project timeline.
    deadline_date:
      type: date
      description: The 'deadline_date' field in the 'project_project' table specifies
        the due date by which the project must be completed. This field stores values
        of the date type, indicating the final deadline for project deliverables and
        milestones.
    project_capacity:
      type: double
      description: "Field: `project_capacity`  \nType: `double`  \nDescription: Represents\
        \ the total capacity or resource allocation for the project, measured as a\
        \ numerical value. This field can be used to quantify the overall limits of\
        \ the project's resources, such as manpower"
    budget:
      type: double
      description: Field 'budget' in the 'project_project' table represents the allocated
        financial resources for the project. It is stored as a double to accommodate
        decimal values, allowing for precise representation of monetary amounts.
    status:
      type: varchar(150)
      description: The 'status' field in the 'project_project' table is a variable
        character string (varchar) with a maximum length of 150 characters. It is
        used to represent the current operational state of the project, indicating
        phases such as 'ongoing',
    company_id:
      type: bigint
      description: "**Field: company_id**  \n**Type:** bigint  \n**Description:**\
        \ This field stores a unique identifier for the company associated with a\
        \ specific project. It links the project to a particular company, enabling\
        \ the organization and management of projects within the context of"
    created_by_id:
      type: int
      description: The field 'created_by_id' in the 'project_project' table is an
        integer that stores the unique identifier of the user who created the project.
    project_site_id:
      type: int
      description: The field 'project_site_id' is an integer that uniquely identifies
        the site associated with a specific project in the 'project_project' table.
        It serves as a foreign key that links to the corresponding site in the related
        site management table, facilitating the organization
    project_registration_id:
      type: int
      description: The field 'project_registration_id' is an integer that uniquely
        identifies the registration associated with a specific project in the 'project_project'
        table. It serves as a foreign key linking to a registration table, facilitating
        the management of project registrations.
    project_lead_id:
      type: int
      description: "Field: `project_lead_id`  \nType: `int`  \nDescription: This field\
        \ stores the unique identifier of the project lead responsible for overseeing\
        \ the project. It references a user or team member who manages the project's\
        \ activities and ensures its successful completion"
    project_manager_id:
      type: int
      description: The 'project_manager_id' field in the 'project_project' table is
        an integer that stores the unique identifier for the project manager associated
        with a specific project. This field establishes a relationship between the
        project and the user designated as its manager.
    electrical_engineering_head_id:
      type: int
      description: The field 'electrical_engineering_head_id' is an integer that serves
        as a foreign key referencing the unique identifier of the head of the electrical
        engineering department associated with a specific project in the 'project_project'
        table.
    mechanical_engineering_head_id:
      type: int
      description: The field 'mechanical_engineering_head_id' is an integer that references
        the unique identifier of the head of the mechanical engineering department
        associated with a specific project in the 'project_project' table. This field
        establishes a relationship between projects and their respective mechanical
    project_head_id:
      type: int
      description: "**Field:** `project_head_id`  \n**Type:** `int`  \n**Description:**\
        \ This field stores the unique identifier (ID) of the individual designated\
        \ as the project head for the corresponding project. It facilitates the association\
        \ of a project with its"
    mdl:
      type: json
      description: The field 'mdl' in the 'project_project' table is of type 'json'
        and is used to store machine learning model parameters and configurations
        in a structured format. This allows for flexible storage of various model
        specifications, enabling easy retrieval and manipulation of
    mdl_revision_history:
      type: json
      description: The 'mdl_revision_history' field in the 'project_project' table
        is a JSON datatype that stores the history of revisions made to the project.
        This field typically includes information such as revision timestamps, author
        details, and descriptions of changes, enabling tracking of
    total_amount_consumed:
      type: double
      description: "**Field Name:** total_amount_consumed  \n**Data Type:** double\
        \  \n**Description:** Represents the total amount of resources consumed by\
        \ the project, measured in a numerical format allowing for decimal values.\
        \ This field is used to track expenditures and resource usage throughout"
    total_bbu:
      type: double
      description: The field `total_bbu` in the `project_project` table represents
        the total budgeted billing units (BBU) for the project. It is stored as a
        double data type, allowing for decimal values to accommodate fractional billing
        units.
    installer_id:
      type: bigint
      description: The field 'installer_id' in the 'project_project' table is a bigint
        that serves as a unique identifier for the installer associated with a specific
        project. It establishes a link between the project and the corresponding installer,
        enabling the tracking and management of installations
    amount_received_till_date:
      type: double
      description: The field 'amount_received_till_date' is a double type variable
        in the 'project_project' table that stores the total monetary amount received
        for the project up to the current date. This value helps in tracking the financial
        progress and funding status of the
    material_dispatch_value_till_date:
      type: double
      description: The field 'material_dispatch_value_till_date' in the 'project_project'
        table stores the cumulative monetary value of materials dispatched for the
        project up to the current date, represented as a double precision numeric
        value.
    last_amount_received:
      type: double
      description: "**Field Name:** last_amount_received  \n**Type:** double  \n**Description:**\
        \ Represents the last monetary amount received for the project, stored as\
        \ a decimal value to account for precise financial calculations."
    last_amount_received_date:
      type: date
      description: The field 'last_amount_received_date' in the 'project_project'
        table stores the date on which the last payment or financial contribution
        was received for a specific project. This helps in tracking funding milestones
        and financial progress related to the project.
    last_material_dispatch_date:
      type: date
      description: The field 'last_material_dispatch_date' in the 'project_project'
        table stores the date on which the last materials were dispatched for the
        project. This date helps track the logistics and timeline of material delivery
        related to the project.
    last_amount_invoice_date:
      type: date
      description: "**Field:** `last_amount_invoice_date`  \n**Type:** Date  \n**Description:**\
        \ This field stores the date of the last invoice issued for the project, indicating\
        \ when the most recent billing occurred."
    last_invoice_amount_received_with_gst:
      type: double
      description: The field 'last_invoice_amount_received_with_gst' in the 'project_project'
        table stores the total amount received from the last invoice, including Goods
        and Services Tax (GST). This value is represented as a double data type, allowing
        for precise numerical
    last_invoice_amount_received_without_gst:
      type: double
      description: This field, `last_invoice_amount_received_without_gst`, is a double
        type that represents the total amount received from the most recent invoice
        for the project, excluding any Goods and Services Tax (GST).
    total_invoice_amount_till_date_with_gst:
      type: double
      description: "**Field:** total_invoice_amount_till_date_with_gst  \n**Type:**\
        \ double  \n**Description:** This field represents the total amount of invoices\
        \ issued for the project up to the current date, including Goods and Services\
        \ Tax (GST). It reflects the"
    total_invoice_amount_till_date_without_gst:
      type: double
      description: "**Field: total_invoice_amount_till_date_without_gst**  \n**Type:**\
        \ Double  \n**Description:** Represents the total amount of invoices issued\
        \ for the project to date, excluding Goods and Services Tax (GST). This field\
        \ is used to track the"
    engineering_section_approval:
      type: varchar(30)
      description: "Field Name: `engineering_section_approval`  \nType: `varchar(30)`\
        \  \nDescription: This field stores the status of approval from the engineering\
        \ section related to a specific project, allowing for a maximum of 30 characters."
    planning_section_approval:
      type: varchar(30)
      description: The field 'planning_section_approval' in the 'project_project'
        table represents the approval status or identifier related to the planning
        section of a project. It is stored as a variable character string with a maximum
        length of 30 characters. This field is
    bbu_no:
      type: varchar(30)
      description: The field 'bbu_no' in the 'project_project' table is a varchar
        (variable character) field with a maximum length of 30 characters. It is used
        to store the Business Unit Number (BBU) associated with a project, allowing
    budget_with_gst:
      type: double
      description: "**Field: budget_with_gst**  \n**Type: double**  \n**Description:**\
        \ This field represents the total budget for the project, including Goods\
        \ and Services Tax (GST). It is stored as a double to accommodate decimal\
        \ values, allowing for precision"
    bbu_date:
      type: date
      description: The 'bbu_date' field in the 'project_project' table represents
        the date of the project's Business Benefit Update (BBU). It captures the specific
        date on which the project's benefits were assessed or updated, helping to
        track the timeline of project evaluations
    bbu_amount:
      type: double
      description: "**Field: bbu_amount**  \n**Type: double**  \n**Description:**\
        \ Represents the total amount of budgeted expense or investment allocated\
        \ for the project, measured in a decimal format to allow for precise financial\
        \ calculations."
    project_closing_date:
      type: date
      description: The field 'project_closing_date' in the 'project_project' table
        stores the date on which a project is scheduled to be completed or officially
        closed.
    project_code:
      type: varchar(150)
      description: The 'project_code' field in the 'project_project' table stores
        a unique alphanumeric identifier for each project, with a maximum length of
        150 characters. It is used to reference and track specific projects within
        the database.
    additional_po:
      type: tinyint(1)
      description: The field `additional_po` in the `project_project` table is a boolean
        indicator (type `tinyint(1)`) that signifies whether additional purchase orders
        are associated with the project. A value of `1` typically indicates that additional
        purchase orders
    status_history:
      type: json
      description: The 'status_history' field in the 'project_project' table is a
        JSON data type that stores a chronological record of the project's status
        changes. Each entry in the JSON object includes timestamps and descriptions
        of the status transitions, allowing for detailed tracking of the
    stage:
      type: varchar(50)
      description: The 'stage' field in the 'project_project' table is a variable
        character string (varchar) with a maximum length of 50 characters. It represents
        the current phase or status of the project, indicating where the project is
        in its lifecycle, such
    bbu_version:
      type: int
      description: The field 'bbu_version' in the 'project_project' table is an integer
        that specifies the version number of the Baseband Unit (BBU) associated with
        the project. This field helps track and manage different versions of the BBU
        used within
    is_bbu_approved:
      type: tinyint(1)
      description: The field 'is_bbu_approved' in the 'project_project' table is a
        tiny integer (1) that indicates whether the project has been approved by the
        BBU (Business Business Unit). A value of '1' signifies approval, while
    current_bbu_amount:
      type: double
      description: '**Field Description: `current_bbu_amount`**


        This field represents the current amount of Baseband Units (BBUs) allocated
        to the project, stored as a double-precision floating-point number. It tracks
        the quantity in relation to project resources or'
    contingency_amount:
      type: double
      description: The field 'contingency_amount' in the 'project_project' table represents
        a monetary value allocated as a contingency fund for the project. It is of
        type 'double' to accommodate decimal values, reflecting the potential additional
        costs that may arise during the
project_projectactivity:
  description: The `project_projectactivity` table stores information related to various
    activities associated with projects within an organization. Each record in this
    table typically includes details such as the activity name, description, associated
    project ID, start and end dates, status, and any relevant
  fields:
    id:
      type: int
      description: The 'id' field is an integer that serves as the primary key for
        the 'project_projectactivity' table. It uniquely identifies each record in
        the table, ensuring that all project activity entries can be distinctly referenced.
    created_at:
      type: datetime(6)
      description: The field 'created_at' in the 'project_projectactivity' table stores
        the timestamp of when the record was created. It is of type 'datetime(6)',
        which allows for the precision of microseconds, enabling detailed tracking
        of creation time.
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_projectactivity' table records
        the timestamp of the most recent update to a project activity. It is stored
        as a datetime with a precision of 6 decimal places, allowing for the inclusion
        of microseconds.
    is_active:
      type: tinyint(1)
      description: The 'is_active' field is a boolean indicator (stored as a tinyint
        of size 1) in the 'project_projectactivity' table that signifies whether a
        project activity is currently active (1) or inactive (0).
    task:
      type: json
      description: The 'task' field in the 'project_projectactivity' table is of type
        JSON and is used to store structured data related to specific tasks within
        a project activity. This field can include various attributes such as task
        name, description, status, assigned team
    created_by_id:
      type: int
      description: The `created_by_id` field in the `project_projectactivity` table
        is an integer that stores the unique identifier of the user who created the
        project activity record. This field helps track the origin of the activity
        for audit and reporting purposes.
    project_regestration_id:
      type: int
      description: The field **project_registration_id** is an integer that serves
        as a unique identifier for project registrations associated with specific
        project activities in the **project_projectactivity** table.
project_projectclientinvoice:
  description: The `project_projectclientinvoice` table stores information related
    to client invoices associated with specific projects. It includes fields for invoice
    details, project identification, client information, billing amounts, payment
    statuses, and associated dates to track the financial transactions between clients
    and projects
  fields:
    id:
      type: bigint
      description: The field 'id' in the 'project_projectclientinvoice' table is of
        type 'bigint' and serves as the unique identifier for each invoice entry.
        It ensures the distinctness of records within the table and is typically used
        as the primary key
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_projectclientinvoice' table
        stores the timestamp of when the invoice record was created. It is of type
        'datetime(6)', allowing for precise tracking of date and time with a precision
        of up to
    updated_at:
      type: datetime(6)
      description: The `updated_at` field in the `project_projectclientinvoice` table
        stores the date and time when the record was last updated. It uses the `datetime(6)`
        data type, which allows for precision up to six fractional seconds. This field
    is_active:
      type: tinyint(1)
      description: The field 'is_active' in the 'project_projectclientinvoice' table
        is a tiny integer (1) that indicates the active status of the invoice. A value
        of 1 signifies that the invoice is currently active, while a value of 0
    invoice_no:
      type: varchar(50)
      description: The 'invoice_no' field in the 'project_projectclientinvoice' table
        is a string type (varchar) with a maximum length of 50 characters. It is used
        to store the unique invoice number associated with each project client invoice,
        facilitating identification and
    invoice_amount_without_gst:
      type: double
      description: "**Field Name:** `invoice_amount_without_gst`  \n**Type:** Double\
        \  \n**Description:** Represents the total amount of the invoice excluding\
        \ Goods and Services Tax (GST). This value indicates the sum of all charges\
        \ and fees before tax is applied."
    invoice_amount_with_gst:
      type: double
      description: The field 'invoice_amount_with_gst' in the 'project_projectclientinvoice'
        table represents the total invoice amount that includes Goods and Services
        Tax (GST). It is stored as a double data type to accommodate decimal values,
        reflecting the final amount payable
    invoice_date:
      type: date
      description: The 'invoice_date' field in the 'project_projectclientinvoice'
        table stores the date when the invoice was issued to the client. This field
        is of type 'date' and is used for tracking billing timelines and financial
        records.
    invoice_doc:
      type: varchar(200)
      description: The 'invoice_doc' field in the 'project_projectclientinvoice' table
        is a VARCHAR data type with a maximum length of 200 characters. It is used
        to store the filename or document identifier of the invoice related to a project
        and client interaction,
    remark:
      type: longtext
      description: "**Field: remark**  \n**Type: longtext**  \n**Description:** This\
        \ field stores any additional comments or notes related to the project client\
        \ invoice. It can accommodate a large amount of text, allowing for detailed\
        \ descriptions, clarifications, or specific"
    created_by_id:
      type: int
      description: The 'created_by_id' field in the 'project_projectclientinvoice'
        table is an integer that stores the unique identifier of the user who created
        the project client invoice record. This field is used to track the origin
        of the invoice for auditing and management
    project_id:
      type: bigint
      description: The field 'project_id' in the 'project_projectclientinvoice' table
        is a bigint type that uniquely identifies the associated project for each
        client invoice. This field establishes a relationship between the invoice
        and its corresponding project, facilitating tracking and management of financial
        transactions
    packing_list_no:
      type: varchar(50)
      description: The field 'packing_list_no' in the 'project_projectclientinvoice'
        table is a variable character field with a maximum length of 50. It is used
        to store the unique identifier or reference number for the packing list associated
        with the client invoice.
    invoice_category:
      type: varchar(50)
      description: The field 'invoice_category' in the 'project_projectclientinvoice'
        table is a varchar type with a maximum length of 50 characters. It is used
        to categorize the invoice, allowing for better organization and reporting
        of different invoice types related to client projects
project_projectcompletiondocument:
  description: The `project_projectcompletiondocument` table stores information related
    to completion documents for projects. It typically includes fields that track
    details such as the project ID, document type, submission date, and status of
    the completion documents, ensuring that all necessary documentation for project
  fields:
    id:
      type: bigint
      description: The 'id' field in the 'project_projectcompletiondocument' table
        is of type 'bigint' and serves as a unique identifier for each record in the
        table. It ensures that every project completion document can be distinctly
        referenced and accessed.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_projectcompletiondocument'
        table records the exact date and time when a project completion document was
        created. It is stored in the datetime format with microsecond precision (datetime(6)).
    updated_at:
      type: datetime(6)
      description: The `updated_at` field in the `project_projectcompletiondocument`
        table stores the timestamp of the last update made to the project completion
        document. It is of type `datetime(6)`, allowing for precision up to microseconds.
        This field helps
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_projectcompletiondocument'
        table is a tiny integer (1) that indicates the active status of a project
        completion document. A value of 1 typically signifies that the document is
        currently active, while a value
    document:
      type: varchar(200)
      description: The 'document' field in the 'project_projectcompletiondocument'
        table is a VARCHAR data type with a maximum length of 200 characters. It is
        used to store the name or path of a document related to the project's completion.
        This field facilitates the
    created_by_id:
      type: int
      description: Field 'created_by_id' in the table 'project_projectcompletiondocument'
        represents the unique identifier (integer) of the user who created the project
        completion document. This field is used to track the creator for accountability
        and auditing purposes.
    document_name_id:
      type: bigint
      description: The `document_name_id` field in the `project_projectcompletiondocument`
        table is of type `bigint`. It serves as a unique identifier referencing the
        specific document name associated with a project completion document. This
        field establishes a relationship to the Document Name
    project_id:
      type: bigint
      description: The `project_id` field in the `project_projectcompletiondocument`
        table represents a unique identifier for a specific project. It is of type
        `bigint`, allowing for storage of large integer values. This field establishes
        a relationship between the completion document and
    date:
      type: date
      description: The 'date' field in the 'project_projectcompletiondocument' table
        represents the completion date of a project, indicating when the associated
        project milestones or documentation were finalized. It is of type 'date',
        storing values in a standard date format.
    remark:
      type: longtext
      description: The 'remark' field in the 'project_projectcompletiondocument' table
        is of type 'longtext' and is used to store detailed notes or comments related
        to the completion document of a project. This field allows for extensive textual
        input, accommodating comprehensive descriptions
project_projectdailyreport:
  description: The `project_projectdailyreport` table stores daily progress reports
    for various projects. Each entry includes details such as the project ID, date
    of the report, tasks completed, challenges encountered, and overall progress assessment.
    This table facilitates tracking project development and ensures
  fields:
    id:
      type: int
      description: The 'id' field is an integer that serves as the unique identifier
        for each record in the 'project_projectdailyreport' table. It is used to distinguish
        individual daily reports within the project management system.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_projectdailyreport' table
        is a datetime(6) type that stores the precise date and time when a project
        daily report entry was created, including microsecond precision.
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_projectdailyreport' table
        stores the timestamp of the last update made to the record, with a precision
        of up to microseconds. This field is useful for tracking modifications and
        ensuring data consistency.
    is_active:
      type: tinyint(1)
      description: The field 'is_active' in the 'project_projectdailyreport' table
        is of type 'tinyint(1)' and indicates whether the daily report is currently
        active. A value of 1 signifies that the report is active, while a value of
    date:
      type: date
      description: The 'date' field in the 'project_projectdailyreport' table stores
        the specific date corresponding to the daily report for a project. This field
        is of type 'date' and facilitates the tracking of daily activities and progress
        on a given project.
    file:
      type: json
      description: The 'file' field in the 'project_projectdailyreport' table is of
        type JSON and is used to store structured data related to files associated
        with the daily project report. This field may contain details such as file
        names, paths, types, or
    task:
      type: json
      description: "**Field: task**  \n**Type: JSON**  \n**Description:** This field\
        \ stores structured data related to specific tasks within a daily project\
        \ report. It can include various attributes related to tasks, such as task\
        \ name, status, assigned personnel, deadlines"
    created_by_id:
      type: int
      description: The field 'created_by_id' is an integer that stores the unique
        identifier of the user who created the project daily report. It links to the
        user entry in the users table, providing context on who authored the report.
    project_id:
      type: int
      description: The 'project_id' field is an integer that uniquely identifies a
        specific project within the 'project_projectdailyreport' table. This field
        serves as a foreign key, linking reports to their corresponding project entries.
    site_engineer_id:
      type: int
      description: The 'site_engineer_id' field is an integer that represents the
        unique identifier of the site engineer associated with a specific daily project
        report in the 'project_projectdailyreport' table. It is used to link the report
        to the responsible site engineer for
project_projectdocument:
  description: The `project_projectdocument` table stores documents related to specific
    projects within the database. It typically includes fields to track the project
    ID, document ID, document type, upload date, file name, file path, and any metadata
    associated with the documents,
  fields:
    id:
      type: int
      description: The 'id' field in the 'project_projectdocument' table is an integer
        that serves as the unique identifier for each document associated with a project.
        It ensures that each record can be individually referenced and managed within
        the database.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_projectdocument' table stores
        the date and time when a project document was created. It is of type 'datetime(6)',
        which means it includes date, time, and fractional seconds up to six digits
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_projectdocument' table records
        the timestamp of the most recent update made to the project document. It is
        stored as a datetime value with microsecond precision, allowing for accurate
        tracking of changes over time.
    is_active:
      type: tinyint(1)
      description: The `is_active` field in the `project_projectdocument` table is
        a boolean indicator (stored as a tiny integer) that represents the active
        status of a project document. A value of 1 signifies that the document is
        currently active, while a
    name:
      type: varchar(150)
      description: The 'name' field in the 'project_projectdocument' table is a varchar
        type with a maximum length of 150 characters. It stores the name or title
        of the document associated with a project, providing a descriptive identifier
        for easy reference.
    file:
      type: varchar(100)
      description: The 'file' field in the 'project_projectdocument' table stores
        the name or path of the document file associated with a project. This field
        is of type 'varchar(100)', allowing for a maximum of 100 characters.
    document_type:
      type: varchar(50)
      description: The 'document_type' field in the 'project_projectdocument' table
        stores a string identifier (up to 50 characters) that describes the type of
        document associated with a project, such as 'report', 'invoice', or 'contract'.
    version:
      type: json
      description: The 'version' field in the 'project_projectdocument' table is of
        type JSON and is used to store detailed information about the various versions
        of a project document. This field can include metadata such as version number,
        creation date, author information, and
    created_by_id:
      type: int
      description: The `created_by_id` field in the `project_projectdocument` table
        is an integer that stores the unique identifier of the user who created the
        project document. This field establishes a relationship between the document
        and the user, allowing for tracking of document ownership
    project_id:
      type: int
      description: The `project_id` field in the `project_projectdocument` table is
        an integer that serves as a foreign key, linking to the unique identifier
        of a project. This field establishes a relationship between project documents
        and their associated projects, facilitating the organization and
project_projectdocuments:
  description: The `project_projectdocuments` table stores information related to
    documents associated with various projects. Each record typically includes a unique
    identifier for the document, the project it is linked to, the document's file
    name, its type (e.g., PDF, Word
  fields:
    id:
      type: bigint
      description: The 'id' field in the 'project_projectdocuments' table is a unique
        identifier of type 'bigint' that serves as the primary key for each record.
        It ensures the distinct identification of each project document entry in the
        table.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_projectdocuments' table
        is a datetime field that records the date and time when a document was created.
        It includes fractions of a second for improved precision, allowing for detailed
        tracking of document creation events.
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_projectdocuments' table
        stores the timestamp of the last update made to a project document. It is
        of type 'datetime(6)', allowing for precision up to microseconds. This field
        helps track changes and
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_projectdocuments' table is
        a tiny integer (1) that indicates the active status of a project document.
        A value of 1 typically signifies that the document is currently active, while
        a value of
    name:
      type: varchar(150)
      description: The 'name' field in the 'project_projectdocuments' table is a VARCHAR
        data type with a maximum length of 150 characters. It stores the name or title
        of the project document, providing a clear and concise identifier for each
        document associated with a
    is_mandatory:
      type: tinyint(1)
      description: The 'is_mandatory' field in the 'project_projectdocuments' table
        is a boolean indicator represented as a tiny integer (1 or 0). It specifies
        whether the associated project document is required (1) or optional (0) for
        the
    created_by_id:
      type: int
      description: The field `created_by_id` in the table `project_projectdocuments`
        stores the identifier (integer) of the user who created the project document.
        This field establishes a link to the user account responsible for the document's
        creation, facilitating tracking of authors
project_projectexpense:
  description: The `project_projectexpense` table stores information about expenses
    related to specific projects. Each record includes details such as the project
    identifier, expense amount, description, date incurred, and any associated category
    or type of expense. This table facilitates tracking and managing project
  fields:
    id:
      type: bigint
      description: The 'id' field in the 'project_projectexpense' table is of type
        'bigint' and serves as the unique identifier for each record in the table.
        It is used to distinctly reference project expense entries.
    category:
      type: varchar(50)
      description: The 'category' field in the 'project_projectexpense' table is a
        variable character string with a maximum length of 50 characters. It is used
        to classify the type or nature of the project expense, facilitating organization
        and reporting of expenses by category.
    amount:
      type: double
      description: The 'amount' field in the 'project_projectexpense' table represents
        the monetary value of an expense associated with a specific project. It is
        stored as a double data type to accommodate decimal values, allowing for precise
        financial calculations.
    transaction_type:
      type: varchar(10)
      description: The field 'transaction_type' in the 'project_projectexpense' table
        is a varchar data type with a maximum length of 10 characters. It stores the
        type of financial transaction related to project expenses, indicating whether
        the transaction is a credit, debit,
    transaction_date:
      type: datetime(6)
      description: The 'transaction_date' field in the 'project_projectexpense' table
        stores the date and time of the financial transaction, recorded with microsecond
        precision. This field is used to track when each expense was incurred, allowing
        for detailed financial analysis and reporting within
    details:
      type: json
      description: The 'details' field in the 'project_projectexpense' table is of
        type JSON and stores detailed information about the project expense. This
        may include various attributes such as category, description, amount, date
        incurred, and any additional notes, allowing for flexible
    description:
      type: longtext
      description: The 'description' field in the 'project_projectexpense' table is
        a 'longtext' data type that stores a detailed narrative or explanation of
        the specific project expense. This field is intended to provide context, justification,
        or additional information regarding the expense
    project_id:
      type: bigint
      description: The `project_id` field in the `project_projectexpense` table is
        of type `bigint` and serves as a unique identifier for each project associated
        with the expenses recorded in this table. It establishes a relationship between
        project expenses and their respective projects
    category_id:
      type: int unsigned
      description: The `category_id` field is an unsigned integer that represents
        the unique identifier for the category associated with a specific project
        expense in the `project_projectexpense` table. This field establishes a relationship
        between the expense and its corresponding category for better organization
        and reporting
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_projectexpense' table stores
        the date and time when the project expense record was created. It has a precision
        of 6 microseconds, allowing for precise timestamping.
    created_by_id:
      type: int
      description: The `created_by_id` field in the `project_projectexpense` table
        is an integer that stores the unique identifier of the user who created the
        project expense entry. This field helps track the origin of the record for
        accountability and auditing purposes.
    is_active:
      type: tinyint(1)
      description: "**Field:** is_active  \n**Type:** tinyint(1)  \n**Description:**\
        \ Indicates whether the project expense is currently active. A value of 1\
        \ represents that the expense is active, while a value of 0 indicates it is\
        \ inactive."
    updated_at:
      type: datetime(6)
      description: The `updated_at` field in the `project_projectexpense` table stores
        the date and time when the record was last updated, with a precision of microseconds
        (up to 6 decimal places). This field is typically used for tracking changes
        and maintaining
project_projectinstallationbudget:
  description: The `project_projectinstallationbudget` table stores budgetary information
    related to project installations. It typically includes details such as the installation
    costs, allocation of resources, budget estimates, and any adjustments or variations.
    This table is essential for tracking financial planning and expenditures
  fields:
    id:
      type: bigint
      description: The 'id' field in the 'project_projectinstallationbudget' table
        is a unique identifier of type 'bigint' for each record in the table. It serves
        as the primary key, ensuring that each installation budget entry can be distinctly
        referenced.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_projectinstallationbudget'
        table stores the timestamp of when a record was created. It is of type 'datetime(6)',
        which allows for precision up to microseconds, enabling detailed tracking
        of the creation time
    updated_at:
      type: datetime(6)
      description: The `updated_at` field in the `project_projectinstallationbudget`
        table stores the timestamp of the most recent update to the budget record.
        It is of type `datetime(6)`, allowing for precise time storage with up to
        six digits of fractional
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_projectinstallationbudget'
        table is a tiny integer (1) that indicates the active status of a project
        installation budget. A value of 1 signifies that the budget is currently active,
        while a value of
    name:
      type: varchar(150)
      description: The 'name' field in the 'project_projectinstallationbudget' table
        is a VARCHAR data type with a maximum length of 150 characters. It is used
        to store the name or title associated with a specific project installation
        budget. This field typically represents a
    description:
      type: longtext
      description: The 'description' field in the 'project_projectinstallationbudget'
        table is of type 'longtext' and is used to store a detailed narrative or commentary
        about the project's installation budget. This can include specifics about
        budget allocation, cost estimates, and any
    amount:
      type: double
      description: The 'amount' field in the 'project_projectinstallationbudget' table
        represents the financial budget allocated for a specific project installation.
        It is of type 'double', allowing for precise representation of monetary values,
        including decimals.
    created_by_id:
      type: int
      description: Field `created_by_id` in the `project_projectinstallationbudget`
        table refers to the unique identifier (integer) of the user or entity that
        created the installation budget record. This field is used to track the creator
        for accountability and auditing purposes.
    project_id:
      type: bigint
      description: The field 'project_id' is of type 'bigint' in the 'project_projectinstallationbudget'
        table. It serves as a unique identifier for each project associated with the
        budget details, linking the budget records to the corresponding project.
    is_contigency:
      type: tinyint(1)
      description: The `is_contingency` field in the `project_projectinstallationbudget`
        table is a boolean indicator, represented as a tiny integer (1 for true, 0
        for false), that signals whether the budget item is designated as a contingency
        expense within
    budget_type:
      type: varchar(20)
      description: The field 'budget_type' in the 'project_projectinstallationbudget'
        table is a VARCHAR data type with a maximum length of 20 characters. It represents
        the classification or category of the budget for a project installation, allowing
        for distinct types of budgeting such
    left_po_amount:
      type: double
      description: "**Field: left_po_amount**  \n**Type: Double**  \n**Description:**\
        \ Represents the remaining amount of the purchase order (PO) allocated for\
        \ the project installation budget. This value indicates how much budget is\
        \ still available for expenditure under the specific installation"
    used_po_amount:
      type: double
      description: The field 'used_po_amount' in the 'project_projectinstallationbudget'
        table represents the total amount of purchase orders that have been utilized
        or expended within a specific project installation budget. This value is stored
        as a double, allowing for decimal precision in
    remark:
      type: longtext
      description: The 'remark' field in the 'project_projectinstallationbudget' table
        is a longtext data type used to store additional comments or notes related
        to the project installation budget. This field allows for detailed descriptions
        and observations that exceed typical character limits, providing flexibility
    status:
      type: varchar(50)
      description: The 'status' field in the 'project_projectinstallationbudget' table
        is a VARCHAR(50) data type that represents the current state or condition
        of the project installation budget. This field can store descriptive text,
        allowing users to categorize budgets as, for
    approved_amount:
      type: double
      description: The 'approved_amount' field in the 'project_projectinstallationbudget'
        table represents the allocated budget amount, in double precision, that has
        been officially approved for a specific project installation.
project_projectinstaller:
  description: The `project_projectinstaller` table stores information related to
    the installation configurations and requirements for various projects. It includes
    fields that detail the specific installer tools, versioning, and associated project
    metadata to facilitate the deployment and management of software projects.
  fields:
    id:
      type: bigint
      description: The 'id' field in the 'project_projectinstaller' table is a unique
        identifier for each record, represented as a bigint. This field serves as
        the primary key, ensuring that each project installer can be distinctly identified
        in the database.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_projectinstaller' table
        records the timestamp of when a project installer entry was created. It is
        of type 'datetime(6)', allowing for precise date and time information with
        microsecond accuracy.
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_projectinstaller' table
        is a datetime(6) type that records the precise date and time, down to microseconds,
        when the project installer was last updated. This field helps track changes
        and modifications made
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_projectinstaller' table is
        a boolean indicator represented as a tiny integer (1 for true, 0 for false)
        that signifies whether the project installer is currently active or not.
    start_date:
      type: date
      description: The 'start_date' field in the 'project_projectinstaller' table
        represents the date when the project installation begins. It is stored as
        a date type, allowing for easy management and querying of installation schedules.
    end_date:
      type: date
      description: 'Field ''end_date'' in the ''project_projectinstaller'' table:
        This field stores the date when the project installation is expected to be
        completed. It allows tracking of project timelines and helps in managing deadlines.'
    remark:
      type: longtext
      description: The 'remark' field in the 'project_projectinstaller' table is a
        longtext type that stores additional comments or notes related to the project
        installation. It allows for extensive text input, enabling users to provide
        detailed insights or observations associated with the project.
    created_by_id:
      type: int
      description: The field `created_by_id` in the `project_projectinstaller` table
        is an integer that stores the unique identifier of the user who created the
        project installer record.
    installer_id:
      type: bigint
      description: The 'installer_id' field in the 'project_projectinstaller' table
        is of type 'bigint' and stores the unique identifier for the installer associated
        with a specific project. This field serves as a reference to link the installer
        to the project, facilitating
    project_id:
      type: bigint
      description: The field 'project_id' is of type 'bigint' in the 'project_projectinstaller'
        table. It serves as a unique identifier for each project, linking the project
        installer to its corresponding project within the database. This field ensures
        relational integrity by
project_projectinstallercomment:
  description: The `project_projectinstallercomment` table stores comments related
    to project installers. Each entry typically includes details such as the associated
    project ID, installer ID, and the content of the comment, along with any relevant
    timestamps for creation or modification. This table facilitates
  fields:
    id:
      type: bigint
      description: The 'id' field in the 'project_projectinstallercomment' table is
        a unique identifier of type 'bigint' that serves as the primary key for each
        comment entry related to project installers. This field ensures that each
        record can be uniquely referenced.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_projectinstallercomment'
        table stores the date and time when a comment was created. It is recorded
        with precision up to microseconds (datetime(6)). This timestamp helps track
        the chronological order of comments associated
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_projectinstallercomment'
        table records the date and time when a comment was last modified. It is stored
        in 'datetime(6)' format, which includes precision up to microseconds, allowing
        for accurate tracking
    is_active:
      type: tinyint(1)
      description: The `is_active` field in the `project_projectinstallercomment`
        table is a boolean indicator represented as a tiny integer (1 or 0). It signifies
        whether the comment is currently active (1 for active, 0 for inactive).
    date:
      type: date
      description: The 'date' field in the 'project_projectinstallercomment' table
        stores the date when a comment was made by the project installer. It is of
        type 'date', allowing for the representation of the date without time.
    task_name:
      type: varchar(50)
      description: The field 'task_name' in the 'project_projectinstallercomment'
        table is a VARCHAR data type with a maximum length of 50 characters. It is
        used to store the name of a specific task associated with a project installer
        comment.
    descriptions:
      type: longtext
      description: "Field Description: \n\nThe 'descriptions' field in the 'project_projectinstallercomment'\
        \ table is of type 'longtext' and is used to store detailed comments or notes\
        \ related to the installation of a project. This field can accommodate large\
        \ volumes of"
    attachment_added:
      type: tinyint(1)
      description: The field 'attachment_added' in the 'project_projectinstallercomment'
        table is a boolean indicator represented as a tiny integer (1 for true, 0
        for false). It specifies whether an attachment has been added to a particular
        project installer comment.
    created_by_id:
      type: int
      description: The field 'created_by_id' is an integer that stores the unique
        identifier of the user who created the comment in the 'project_projectinstallercomment'
        table. This field is used to track the origin of each comment for accountability
        and reference purposes.
    project_id:
      type: bigint
      description: The 'project_id' field in the 'project_projectinstallercomment'
        table is of type 'bigint' and uniquely identifies the project associated with
        a specific installer comment. It serves as a foreign key linking to the corresponding
        project record in the projects table
project_projectmanagement:
  description: The `project_projectmanagement` table stores information related to
    project management activities within an organization. It includes details such
    as project identifiers, names, statuses, start and end dates, assigned team members,
    budgets, and progress metrics. This table serves as a
  fields:
    id:
      type: bigint
      description: The 'id' field in the 'project_projectmanagement' table is a unique
        identifier of type 'bigint' that serves as the primary key for each project
        management record, ensuring distinct identification for each entry.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_projectmanagement' table
        records the date and time when a project management entry was created. It
        is stored as a datetime value with precision up to six decimal places, allowing
        for precise time tracking.
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_projectmanagement' table
        records the timestamp of the most recent update made to a project management
        entry, with precision up to microseconds. This field helps track changes and
        maintain the history of updates for each project
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_projectmanagement' table
        is a tiny integer (1) that indicates the active status of a project. It typically
        uses a value of 1 to denote that the project is currently active, while a
        value
    site_person_category:
      type: varchar(50)
      description: "**Field Name:** site_person_category  \n**Type:** varchar(50)\
        \  \n**Description:** This field stores the category designation of a person\
        \ associated with a site in project management, allowing up to 50 characters\
        \ for categorization purposes (e.g.,"
    start_date:
      type: date
      description: The 'start_date' field in the 'project_projectmanagement' table
        represents the date when a project officially begins. This date is used to
        track the project's timeline and schedule.
    end_date:
      type: date
      description: The 'end_date' field in the 'project_projectmanagement' table stores
        the date when a project is scheduled to be completed. This field helps track
        the project's timeline and ensures effective project management by indicating
        the expected finish date.
    remark:
      type: longtext
      description: The 'remark' field in the 'project_projectmanagement' table is
        a Long Text field used to store detailed notes, comments, or observations
        related to project management. This field can accommodate extensive text,
        allowing users to provide comprehensive information about project statuses,
    created_by_id:
      type: int
      description: The 'created_by_id' field in the 'project_projectmanagement' table
        is an integer type that stores the unique identifier of the user who created
        the project management entry. This field is used to track the creator of the
        record for accountability and reference purposes
    person_id:
      type: int
      description: The field `person_id` in the `project_projectmanagement` table
        is an integer that serves as a unique identifier for individuals associated
        with project management tasks. It links project activities to specific people,
        facilitating tracking and management of responsibilities within the project.
    project_id:
      type: bigint
      description: The 'project_id' field in the 'project_projectmanagement' table
        is of type 'bigint' and serves as a unique identifier for each project within
        the project management system. This field is used to reference and link to
        specific projects throughout the database
project_projectpackinglist:
  description: The `project_projectpackinglist` table stores information about packing
    lists associated with specific projects. Each entry includes details such as project
    ID, item descriptions, quantities of items, and any relevant notes. This table
    helps in tracking and organizing the materials and products
  fields:
    id:
      type: bigint
      description: The 'id' field in the 'project_projectpackinglist' table is a unique
        identifier of type 'bigint' that serves as the primary key for each record
        in the table. It ensures that each packing list entry can be distinctly referenced.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_projectpackinglist' table
        records the exact date and time when a project packing list entry was created.
        It is stored as a datetime value with microsecond precision (datetime(6)).
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_projectpackinglist' table
        stores the timestamp of the last update made to the project packing list.
        It is of type 'datetime(6)', which means it captures the date and time with
        precision up to
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_projectpackinglist' table
        is a tiny integer (1) that indicates the active status of an item in the packing
        list. A value of '1' signifies that the item is active, while a
    packing_list_no:
      type: varchar(50)
      description: The field 'packing_list_no' in the table 'project_projectpackinglist'
        is a varchar data type with a maximum length of 50 characters. It is used
        to store a unique identifier for the packing list associated with a specific
        project, facilitating the
    date:
      type: date
      description: The 'date' field in the 'project_projectpackinglist' table stores
        the specific date associated with the project packing list entry. It is of
        type 'date' and is used to record when the packing list was created or relevant
        actions took place.
    remark:
      type: longtext
      description: The 'remark' field in the 'project_projectpackinglist' table is
        a 'longtext' data type that allows for the entry of lengthy textual notes
        or comments related to the packing list for a project. This field can store
        detailed information, observations
    status:
      type: varchar(36)
      description: The 'status' field in the 'project_projectpackinglist' table is
        a VARCHAR(36) data type that holds the current status of the project packing
        list. It is used to indicate various stages or conditions of the packing list,
        such as '
    created_by_id:
      type: int
      description: The `created_by_id` field in the `project_projectpackinglist` table
        is an integer that stores the unique identifier of the user who created the
        packing list record. This field establishes a link to the user responsible
        for its creation, facilitating tracking and
    project_id:
      type: bigint
      description: '**Field Description:**


        - **Field Name:** project_id

        - **Type:** bigint

        - **Table:** project_projectpackinglist


        **Description:** This field serves as a unique identifier for each project
        within the project packing list. It links the'
    vendor_id:
      type: bigint
      description: The 'vendor_id' field in the 'project_projectpackinglist' table
        is a bigint data type that uniquely identifies the vendor associated with
        a specific packing list. It serves as a reference to the vendor's record in
        the vendor database, enabling the tracking
    po_number:
      type: varchar(200)
      description: The 'po_number' field in the 'project_projectpackinglist' table
        is a variable character string (up to 200 characters) that stores the purchase
        order number associated with the packing list for a project. This field is
        used to identify and track
project_projectpackinglistitems:
  description: The `project_projectpackinglistitems` table stores information related
    to the items included in packing lists for various projects. Each record includes
    details such as item description, quantity, specifications, and associated project
    information, facilitating tracking and inventory management for project logistics.
  fields:
    id:
      type: bigint
      description: "**Field: id**  \n**Type: bigint**  \n**Description:** A unique\
        \ identifier for each record in the `project_projectpackinglistitems` table,\
        \ used to distinguish individual packing list items within a project. This\
        \ field serves as the primary key"
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_projectpackinglistitems'
        table records the date and time when each packing list item was created, using
        a precision of up to six fractional seconds.
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_projectpackinglistitems'
        table stores the timestamp of the last update made to a record. It is of type
        'datetime(6)', allowing for precision up to microseconds, and helps track
        changes and
    is_active:
      type: tinyint(1)
      description: The `is_active` field is a tiny integer (1) that indicates the
        active status of an item in the project packing list. A value of '1' denotes
        that the item is active and currently included in the packing list, while
        a value
    quantity:
      type: double
      description: "**Field: quantity**  \n**Type:** double  \n**Description:** Represents\
        \ the amount of items in the packing list for a specific project. It allows\
        \ for decimal values to accommodate fractional quantities."
    remark:
      type: longtext
      description: Field 'remark' in the 'project_projectpackinglistitems' table is
        a longtext field designed to store additional comments or details related
        to specific packing list items within a project. This field can accommodate
        large amounts of text, allowing users to provide extensive
    created_by_id:
      type: int
      description: '**Field Description:**


        - **Name:** created_by_id

        - **Type:** int

        - **Table:** project_projectpackinglistitems

        - **Description:** This integer field stores the unique identifier of the
        user who created the project packing list item'
    project_bom_item_id:
      type: bigint
      description: The field 'project_bom_item_id' is of type 'bigint' and serves
        as a unique identifier for items in the Bill of Materials (BOM) associated
        with the project. It links each packing list item to its corresponding BOM
        item,
    project_packing_list_id:
      type: bigint
      description: The field `project_packing_list_id` is a bigint that serves as
        a foreign key in the `project_projectpackinglistitems` table. It uniquely
        identifies the associated packing list for the project items, linking each
        entry to its corresponding packing list record
    unit_id:
      type: bigint
      description: The field 'unit_id' in the 'project_projectpackinglistitems' table
        is a bigint data type that uniquely identifies a unit associated with a project
        packing list item. This ID serves as a reference to the corresponding unit
        in an inventory or measurement system
    left_quantity:
      type: double
      description: The 'left_quantity' field in the 'project_projectpackinglistitems'
        table represents the remaining quantity of items that are yet to be packed
        or delivered. This value is stored as a double to accommodate decimal values,
        allowing for precise tracking of inventory levels
    status:
      type: varchar(10)
      description: The 'status' field in the 'project_projectpackinglistitems' table
        is a varchar(10) data type that indicates the current state or condition of
        a project packing list item. This field can be used to represent values such
        as 'Pending',
    delivered_quantity:
      type: double
      description: "**Field:** `delivered_quantity`  \n**Type:** `double`  \n**Description:**\
        \ Represents the quantity of items that have been delivered for a specific\
        \ packing list item in a project. This field captures the actual amount received,\
        \ allowing for tracking and"
project_projectpayment:
  description: The `project_projectpayment` table stores information related to payments
    made for various projects. It includes details such as the payment amount, date
    of payment, project association, payment status, and any relevant notes or references.
    This table facilitates tracking and management of
  fields:
    id:
      type: int
      description: The 'id' field is an integer that serves as the unique identifier
        for each record in the 'project_projectpayment' table. It is used to distinguish
        between different project payment entries.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_projectpayment' table records
        the date and time when the payment entry was created. This field has a precision
        of 6, allowing for fractions of a second to be captured, enabling high-resolution
        time tracking
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_projectpayment' table stores
        the timestamp of the most recent update to the record. It is stored as a datetime
        value with precision up to six decimal places for fractional seconds, allowing
        for high-resolution tracking of
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_projectpayment' table is
        a boolean flag represented as a tinyint (1). It indicates whether a project
        payment is currently active (value of 1) or inactive (value of 0).
    payment_date:
      type: date
      description: The 'payment_date' field in the 'project_projectpayment' table
        represents the date on which a payment was made for a project. It is stored
        in the standard date format and is used to track the timing of financial transactions
        related to the project.
    payment_mode:
      type: varchar(30)
      description: The 'payment_mode' field in the 'project_projectpayment' table
        is a varchar data type with a maximum length of 30 characters. It is used
        to specify the method of payment for a project, such as 'credit card,' 'bank
        transfer
    reference_id:
      type: varchar(250)
      description: The `reference_id` field in the `project_projectpayment` table
        is a variable character string with a maximum length of 250 characters. It
        serves as a unique identifier for each payment transaction related to a project,
        allowing for efficient tracking and referencing of
    remark:
      type: longtext
      description: The 'remark' field in the 'project_projectpayment' table is of
        type 'longtext' and is used to store detailed comments or notes related to
        a specific project payment. This field can accommodate extensive text, allowing
        for comprehensive information about the payment
    bank_id:
      type: int
      description: "**Field:** `bank_id`  \n**Type:** `int`  \n**Description:** Identifies\
        \ the bank associated with a specific project payment. This field serves as\
        \ a foreign key, linking to the corresponding bank record in the database,\
        \ and is used"
    created_by_id:
      type: int
      description: The 'created_by_id' field in the 'project_projectpayment' table
        is an integer that stores the unique identifier of the user who created the
        project payment record.
    project_id:
      type: int
      description: The `project_id` field in the `project_projectpayment` table is
        an integer that uniquely identifies the associated project. It serves as a
        foreign key linking to the primary key of the related project, allowing for
        the management and organization of payments specific to
    payable_amount:
      type: double
      description: The 'payable_amount' field in the 'project_projectpayment' table
        represents the total monetary amount that is due for payment related to a
        specific project payment transaction. It is stored as a double data type to
        accommodate fractional values, enabling precise financial calculations
    payment_for:
      type: varchar(50)
      description: The 'payment_for' field in the 'project_projectpayment' table is
        a varchar(50) type that stores a description or identifier of the purpose
        of the payment, indicating what the payment is associated with or intended
        for within the project context.
project_projectpaymentterms:
  description: The `project_projectpaymentterms` table stores the various payment
    terms associated with projects. Each record typically includes details such as
    the payment amount, due dates, and specific conditions related to the payment
    schedules for projects. This table helps in managing financial agreements between
  fields:
    id:
      type: bigint
      description: The 'id' field in the 'project_projectpaymentterms' table is a
        unique identifier of type 'bigint' that serves as the primary key for each
        record in the table. It ensures that each payment term is distinctly recognized
        within the project payment
    created_at:
      type: datetime(6)
      description: Field `created_at` in the `project_projectpaymentterms` table stores
        the date and time when the payment term record was created. It is recorded
        with a precision of up to 6 fractional seconds, allowing for precise timestamping
        of events.
    updated_at:
      type: datetime(6)
      description: The `updated_at` field in the `project_projectpaymentterms` table
        is a datetime field that captures the precise date and time (to the microsecond)
        when the record was last updated. It is used to track changes and maintain
        versioning for
    is_active:
      type: tinyint(1)
      description: The field `is_active` in the `project_projectpaymentterms` table
        is a boolean indicator represented as a tiny integer. It denotes whether the
        payment terms associated with a project are currently active (1) or inactive
        (0).
    date:
      type: date
      description: "**Field:** date  \n**Type:** date  \n**Description:** This field\
        \ records the date associated with the payment terms of a project, indicating\
        \ when payments are due or when the terms were established."
    terms:
      type: longtext
      description: The 'terms' field in the 'project_projectpaymentterms' table is
        a longtext data type that stores detailed payment terms and conditions associated
        with a project. This field can accommodate large amounts of text, allowing
        for comprehensive descriptions of payment schedules, discount
    created_by_id:
      type: int
      description: The field `created_by_id` is an integer that stores the unique
        identifier of the user or system account that created the entry in the `project_projectpaymentterms`
        table. This helps track the origin of the record for auditing and management
        purposes.
    project_id:
      type: bigint
      description: The `project_id` field is of type 'bigint' and serves as a unique
        identifier for a specific project in the `project_projectpaymentterms` table.
        It establishes a relationship between the payment terms and the associated
        project.
    amount:
      type: double
      description: The 'amount' field in the 'project_projectpaymentterms' table represents
        the monetary value associated with the payment terms for a project. It is
        stored as a double precision number, allowing for precise representation of
        values that may include cents or decimals.
    percentage:
      type: double
      description: The 'percentage' field in the 'project_projectpaymentterms' table
        represents a double-precision floating-point value that indicates the percentage
        of the total project cost associated with specific payment terms. It is utilized
        to calculate payment amounts based on the agreed-upon
    status:
      type: varchar(25)
      description: The 'status' field in the 'project_projectpaymentterms' table is
        a varchar(25) data type that represents the current status of the payment
        terms associated with a project. This field may contain values such as "Pending,"
        "Approved," "
project_projectregistration:
  description: The `project_projectregistration` table stores information related
    to the registration of projects within the system. This table typically includes
    fields for project IDs, registration dates, project names, descriptions, status
    indicators, and user details for those who registered the projects. Its
  fields:
    id:
      type: int
      description: The 'id' field in the 'project_projectregistration' table is an
        integer that uniquely identifies each project registration record. It serves
        as the primary key for the table, ensuring that each entry can be distinctly
        referenced.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_projectregistration' table
        stores the timestamp of when a project registration entry was created, with
        precision up to microseconds. It helps track the creation time of records
        for auditing and history purposes.
    updated_at:
      type: datetime(6)
      description: "**Field:** `updated_at`  \n**Type:** `datetime(6)`  \n**Description:**\
        \ This field stores the date and time of the last update made to the project\
        \ registration record, with precision up to microseconds. It is automatically\
        \ updated whenever"
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_projectregistration' table
        is a tinyint (1) that indicates the active status of a project registration.
        A value of 1 signifies that the registration is currently active, while a
        value of 0
    date:
      type: date
      description: "**Field: date**  \n**Type:** date  \n**Description:** Represents\
        \ the date when the project registration was created or recorded in the system.\
        \ This field captures the specific calendar date, facilitating chronological\
        \ tracking of project registrations."
    revision_no:
      type: varchar(50)
      description: The field 'revision_no' in the 'project_projectregistration' table
        is a variable character string (varchar) that can hold up to 50 characters.
        It is used to store the revision number associated with a specific project
        registration, allowing for the tracking
    type_of_project:
      type: varchar(25)
      description: The 'type_of_project' field in the 'project_projectregistration'
        table stores the category or classification of the project, represented as
        a string with a maximum length of 25 characters. This field helps to identify
        the nature of the project, such as
    billing_address:
      type: longtext
      description: The field 'billing_address' in the 'project_projectregistration'
        table is of type 'longtext' and is used to store the detailed billing address
        associated with a project registration. This field can accommodate extensive
        address information, including street name, city,
    billing_pincode:
      type: int
      description: "**Field:** billing_pincode  \n**Type:** int  \n**Description:**\
        \ This field stores the postal code associated with the billing address of\
        \ the project registration. It is used for identifying the geographical location\
        \ for billing purposes."
    gst_no:
      type: varchar(100)
      description: The field 'gst_no' in the 'project_projectregistration' table is
        a varchar(100) type that stores the Goods and Services Tax (GST) identification
        number associated with the registration of a project. This number is used
        for tax purposes and must
    pan_no:
      type: varchar(100)
      description: Field 'pan_no' in the 'project_projectregistration' table is a
        varchar(100) type that stores the Permanent Account Number (PAN) associated
        with the project registration. This field is used for tax identification and
        verification purposes in India.
    po_copy:
      type: varchar(100)
      description: The 'po_copy' field in the 'project_projectregistration' table
        stores a copy of the purchase order (PO) as a string, with a maximum length
        of 100 characters. This field is used to reference or hold details related
        to the associated
    final_offer_copy:
      type: varchar(100)
      description: The field 'final_offer_copy' in the 'project_projectregistration'
        table is a varchar(100) type that stores a brief textual representation of
        the final offer associated with the project registration. This field is intended
        to capture key details or summaries of the
    delivery_schedule:
      type: date
      description: "**Field: delivery_schedule**  \n**Type: Date**  \n**Description:**\
        \ Indicates the scheduled date for the delivery of project milestones or final\
        \ outputs associated with the project registration."
    po_value_without_gst:
      type: double
      description: "**Field Name:** po_value_without_gst  \n**Type:** Double  \n**Description:**\
        \ This field represents the total value of the purchase order (PO) for the\
        \ project, excluding Goods and Services Tax (GST). It is stored as a double-"
    po_capacity_in_kw:
      type: double
      description: "**Field:** po_capacity_in_kw  \n**Type:** Double  \n**Description:**\
        \ This field represents the capacity of the power output for the project,\
        \ measured in kilowatts (kW). It indicates the maximum electrical output that\
        \ the project can generate."
    po_date:
      type: date
      description: The field 'po_date' in the 'project_projectregistration' table
        stores the date of the purchase order associated with the project registration.
        This date is typically used to track when the purchase order was issued.
    layout:
      type: json
      description: The 'layout' field in the 'project_projectregistration' table is
        a JSON data type that stores flexible design configurations and layout details
        related to project registrations. This allows for the storage of complex,
        structured data in a format that can be easily modified and
    product_section:
      type: json
      description: The 'product_section' field in the 'project_projectregistration'
        table is a JSON data type that stores structured information related to product
        specifications or categorizations associated with the project. This field
        can accommodate various attributes, allowing for flexibility in representing
        different product
    freight_charges:
      type: double
      description: The `freight_charges` field in the `project_projectregistration`
        table stores the cost associated with transporting goods or materials for
        the project. It is represented as a double data type, allowing for accurate
        representation of decimal values to accommodate various freight costs
    other_charges:
      type: double
      description: The field 'other_charges' of type 'double' in the table 'project_projectregistration'
        represents additional financial charges associated with a project registration,
        measured in a decimal format to allow for precise values.
    total_amount:
      type: double
      description: The field 'total_amount' in the 'project_projectregistration' table
        represents the total monetary value associated with a project registration.
        It is stored as a double data type to accommodate both whole numbers and decimal
        values, allowing for precise financial calculations.
    billing_city_id:
      type: int
      description: The 'billing_city_id' field is an integer that stores the identifier
        for the city associated with the billing address in the 'project_projectregistration'
        table. This field links to the corresponding city record in a related city
        table, enabling the retrieval of location
    company_id:
      type: int
      description: The 'company_id' field in the 'project_projectregistration' table
        is an integer that uniquely identifies the company associated with a specific
        project registration. This field serves as a foreign key linking project registrations
        to their respective companies.
    created_by_id:
      type: int
      description: The `created_by_id` field is an integer that stores the unique
        identifier of the user who created the project registration record. This field
        helps track the origin of the entry for auditing and accountability purposes.
    project_site_id:
      type: int
      description: The field `project_site_id` is of type `int` in the `project_projectregistration`
        table. It uniquely identifies the project site associated with a specific
        project registration. This field serves as a foreign key linking to the relevant
        site information within the
    approval:
      type: json
      description: The 'approval' field in the 'project_projectregistration' table
        is of type 'json' and is designed to store detailed information related to
        the approval status of project registrations. This field may include data
        such as approval dates, approver identities, comments
    last_approved_date:
      type: datetime(6)
      description: The field 'last_approved_date' in the 'project_projectregistration'
        table stores the date and time of the most recent approval for the project
        registration, with precision up to microseconds.
    last_approver_id:
      type: int
      description: The `last_approver_id` field in the `project_projectregistration`
        table is an integer that stores the unique identifier of the user who last
        approved the project registration. This field helps track the approval process
        and maintain a history of authorizations for
    revision_history:
      type: json
      description: The `revision_history` field in the `project_projectregistration`
        table is a JSON data type that stores a structured record of changes made
        to the project registration. This may include details such as timestamps,
        user IDs of those who made the changes, and
    other_documents:
      type: json
      description: The 'other_documents' field in the 'project_projectregistration'
        table is a JSON type field used to store a collection of additional documents
        related to the project registration. It allows for flexible data storage,
        accommodating various formats or types of documentation as needed for
    status:
      type: varchar(20)
      description: The 'status' field in the 'project_projectregistration' table is
        a varchar(20) datatype that indicates the current state or progress of the
        project registration. It may contain values such as 'pending', 'approved',
        'rejected', or '
    registration_no:
      type: varchar(50)
      description: The field 'registration_no' in the 'project_projectregistration'
        table is a VARCHAR data type with a maximum length of 50 characters. It is
        used to store the unique registration number associated with a project, ensuring
        each project can be distinctly identified within
    profit_margin:
      type: double
      description: The 'profit_margin' field in the 'project_projectregistration'
        table represents the profit margin of a project as a decimal value. It indicates
        the percentage of revenue that exceeds the costs associated with the project,
        allowing for analysis of profitability.
    version_history:
      type: json
      description: The 'version_history' field in the 'project_projectregistration'
        table is a JSON type field that stores a record of changes made to a project's
        registration details over time. This field captures various versions of the
        project information, including timestamps and user modifications,
    version:
      type: varchar(50)
      description: The 'version' field in the 'project_projectregistration' table
        is a VARCHAR(50) type that stores the version number or identifier of the
        registered project. This field is used to track updates or changes to the
        project over time, allowing for better
    last_approver_comment:
      type: longtext
      description: "**Field: last_approver_comment**  \n**Type:** longtext  \n**Description:**\
        \ This field stores comments or observations made by the last approver during\
        \ the project registration process. It allows for detailed feedback and notes\
        \ related to the approval decision."
    last_approver_status:
      type: varchar(20)
      description: The field `last_approver_status` in the `project_projectregistration`
        table stores the status of the last approver involved in the project registration
        process. It is a variable character field with a maximum length of 20 characters,
        used to indicate
    net_amount:
      type: double
      description: The 'net_amount' field in the 'project_projectregistration' table
        represents the total monetary value of the project after any deductions or
        adjustments. It is stored as a double data type to allow for precise representation
        of fractional amounts.
    profit_margin_unit:
      type: varchar(20)
      description: The field 'profit_margin_unit' in the 'project_projectregistration'
        table stores a string value (up to 20 characters) representing the unit of
        measurement for the profit margin associated with a project. This field is
        used to specify the type of profit
    total_profit_margin:
      type: double
      description: "**Field:** total_profit_margin  \n**Type:** double  \n**Description:**\
        \ Represents the total profit margin for the project, expressed as a decimal\
        \ percentage. This value indicates the profitability of the project by calculating\
        \ the ratio of profit to total revenue generated."
    freight_charges_unit:
      type: varchar(20)
      description: "**Field: freight_charges_unit**  \n**Type:** varchar(20)  \n**Description:**\
        \ This field stores the unit of measurement for freight charges associated\
        \ with a project registration, such as \"USD\", \"EUR\", \"per kg\", or \""
    total_freight_charges:
      type: double
      description: "**Field Name:** total_freight_charges  \n**Type:** Double  \n\
        **Description:** This field represents the total freight charges associated\
        \ with the project registration, recorded as a decimal number to accommodate\
        \ potential fractional values. It is used to track shipping costs"
    calculated_project_capacity_in_wp:
      type: double
      description: "**Field Name:** calculated_project_capacity_in_wp  \n**Type:**\
        \ Double  \n**Description:** This field represents the calculated capacity\
        \ of a project in working points (wp), providing a quantitative measurement\
        \ of the project's ability to utilize available resources effectively. It\
        \ is used"
    project_site_area_in_sq_feet:
      type: double
      description: "Field: `project_site_area_in_sq_feet`  \nType: `double`  \nDescription:\
        \ This field represents the area of the project site measured in square feet.\
        \ It allows for fractional values to accommodate varying site sizes."
    project_start_date:
      type: date
      description: "**Field:** `project_start_date`  \n**Type:** `date`  \n**Description:**\
        \ Represents the scheduled start date of a project in the project registration\
        \ process. This field captures the date on which the project is intended to\
        \ commence."
    project_head_id:
      type: int
      description: The field 'project_head_id' is an integer that stores the unique
        identifier of the project head responsible for overseeing the project registration.
        This field links the project registration to the individual leading the project,
        ensuring proper management and accountability.
    po_value_with_gst:
      type: double
      description: "**Field Name:** po_value_with_gst  \n**Type:** Double  \n**Description:**\
        \ This field represents the total value of the purchase order (PO), inclusive\
        \ of Goods and Services Tax (GST). It is stored as a decimal value to allow\
        \ for"
    is_ornate_project:
      type: tinyint(1)
      description: Field 'is_ornate_project' in the 'project_projectregistration'
        table is a tiny integer (1) that indicates whether a project is considered
        ornate. A value of 1 signifies that the project is ornate, while a value of
        0
    remark:
      type: longtext
      description: "**Field: remark**  \n**Type: longtext**  \n**Description:** This\
        \ field stores detailed comments or notes related to the project registration.\
        \ It can accommodate extensive text, allowing users to provide additional\
        \ context or information that doesn't fit into other structured fields"
    is_project_created:
      type: tinyint(1)
      description: The field 'is_project_created' in the 'project_projectregistration'
        table is a boolean indicator represented as a tiny integer (1 for true, 0
        for false). It specifies whether a project has been successfully created in
        the system.
project_projectscheduleheader:
  description: The `project_projectscheduleheader` table stores header information
    for project schedules. It typically includes fields such as project ID, schedule
    start and end dates, status, and other relevant metadata that outlines the overall
    timeline and key attributes of a project's scheduling. This
  fields:
    id:
      type: int
      description: The 'id' field in the 'project_projectscheduleheader' table is
        an integer type that serves as the unique identifier for each project schedule
        header record. It is typically used as the primary key to differentiate between
        various entries within the table.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_projectscheduleheader' table
        captures the exact date and time when a project schedule header record was
        created. It is stored in the 'datetime(6)' format, allowing for precision
        up to six decimal places
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_projectscheduleheader' table
        is of type 'datetime(6)' and stores the timestamp of the most recent update
        made to the project schedule header record, allowing for precision down to
        microseconds.
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_projectscheduleheader' table
        is a tiny integer (1) that indicates the active status of the project schedule.
        A value of 1 signifies that the schedule is active, while a value of 0
    name:
      type: varchar(150)
      description: The 'name' field in the 'project_projectscheduleheader' table is
        a VARCHAR data type with a maximum length of 150 characters. It is used to
        store the name or title of the project schedule header, providing a descriptive
        identifier for the associated
    created_by_id:
      type: int
      description: The 'created_by_id' field in the 'project_projectscheduleheader'
        table is an integer that stores the unique identifier of the user who created
        the project schedule header. This field establishes a relationship between
        the project schedule header and the user responsible for its
    project_id:
      type: int
      description: The 'project_id' field in the 'project_projectscheduleheader' table
        is an integer that uniquely identifies a project. It serves as a foreign key,
        linking the project schedule header to its corresponding project in the projects
        database.
    header_color:
      type: varchar(7)
      description: The 'header_color' field in the 'project_projectscheduleheader'
        table is a VARCHAR(7) type that stores the color code for the header, typically
        represented in hexadecimal format (e.g., '#FFFFFF' for white). This field
        is used
    weightage:
      type: double
      description: "**Field Name:** weightage  \n**Type:** double  \n**Description:**\
        \ Represents the numerical weight assigned to the project schedule headers,\
        \ indicating their relative importance or contribution to the overall project\
        \ timeline or deliverables. This value can be used for prioritization or"
project_projectschedulesubheader:
  description: The `project_projectschedulesubheader` table is designed to store subheader
    information related to project schedules. It typically includes fields for identifiers,
    associations to project schedules, and relevant metadata that support the organization
    and management of project timelines and tasks within the larger
  fields:
    id:
      type: int
      description: The 'id' field is an integer that uniquely identifies each record
        in the 'project_projectschedulesubheader' table. It serves as the primary
        key for the table, ensuring that each project schedule subheader can be distinctly
        referenced.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_projectschedulesubheader'
        table is a datetime(6) type that records the precise timestamp when a project
        schedule subheader entry was created. The precision of six indicates that
        this timestamp includes milliseconds, allowing
    updated_at:
      type: datetime(6)
      description: "**Field Name**: `updated_at`  \n**Table Name**: `project_projectschedulesubheader`\
        \  \n**Description**: This field stores the timestamp of the last update made\
        \ to the record in the subheader of project schedule. It is"
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_projectschedulesubheader'
        table is a tiny integer (1) that indicates the active status of the project
        schedule subheader. A value of 1 typically signifies that the subheader is
        active, while
    header_color:
      type: varchar(7)
      description: The `header_color` field in the `project_projectschedulesubheader`
        table is a string that stores the color code for the subheader's header. It
        is formatted as a hexadecimal value, typically representing a color in the
        format '#RRGGB
    name:
      type: varchar(150)
      description: The 'name' field in the 'project_projectschedulesubheader' table
        is a variable character string with a maximum length of 150 characters. It
        is used to store the title or label of the project schedule subheader, providing
        a descriptive identifier for
    weightage:
      type: double
      description: "**Field Name:** weightage  \n**Type:** double  \n**Description:**\
        \ Represents the relative importance or contribution of a specific project\
        \ schedule sub-header, expressed as a decimal value. This field is used to\
        \ calculate overall project priorities and resource allocation."
    created_by_id:
      type: int
      description: The 'created_by_id' field in the 'project_projectschedulesubheader'
        table is an integer that stores the unique identifier of the user who created
        the project schedule subheader record. This field helps to track the origin
        of the entry for accountability and
    project_schedule_header_id:
      type: int
      description: The field `project_schedule_header_id` is an integer that serves
        as a foreign key linking to the main project schedule header in the `project_projectschedulesubheader`
        table. It identifies the associated project schedule header for each subheader
        record, enabling the
project_projectsitevisit:
  description: The `project_projectsitevisit` table stores information related to
    site visits conducted for various projects. Each entry records details such as
    the visit date, the project being assessed, attendees, observations made during
    the visit, and any follow-up actions required. This
  fields:
    id:
      type: int
      description: The 'id' field is an integer type primary key that uniquely identifies
        each record in the 'project_projectsitevisit' table.
    created_at:
      type: datetime(6)
      description: Field 'created_at' in the 'project_projectsitevisit' table records
        the exact date and time (with microsecond precision) when a project site visit
        entry was created. This timestamp helps track when the visit was logged in
        the database.
    updated_at:
      type: datetime(6)
      description: The `updated_at` field in the `project_projectsitevisit` table
        is of type `datetime(6)` and stores the timestamp of the most recent update
        made to the record. It allows for precision up to six decimal places, indicating
        the exact
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_projectsitevisit' table is
        a tiny integer (1) that indicates the current status of the site visit. A
        value of '1' denotes that the site visit is active, while a value of
    start_date:
      type: date
      description: The 'start_date' field in the 'project_projectsitevisit' table
        represents the date when a site visit for a specific project begins. It is
        stored as a date data type to facilitate accurate tracking and scheduling
        of project activities.
    end_date:
      type: date
      description: "**Field:** `end_date`  \n**Type:** `date`  \n**Description:**\
        \ Represents the date when the project site visit concludes. This field is\
        \ used to track the completion date of the site visit associated with a specific\
        \ project."
    point_of_contact_name:
      type: varchar(150)
      description: The field `point_of_contact_name` in the `project_projectsitevisit`
        table stores the name of the primary contact person for a specific site visit
        related to a project. It is a variable character string with a maximum length
        of 150 characters.
    point_of_contact_phone_no:
      type: varchar(150)
      description: 'Field ''point_of_contact_phone_no'': A varchar field with a maximum
        length of 150 characters that stores the phone number of the primary contact
        person for the project site visit.'
    remark:
      type: longtext
      description: The 'remark' field in the 'project_projectsitevisit' table is a
        longtext data type that is designed to store detailed notes or comments regarding
        a specific site visit related to a project. This field allows for extensive
        input, enabling users to document
    created_by_id:
      type: int
      description: The 'created_by_id' field in the 'project_projectsitevisit' table
        is of type 'int' and stores the unique identifier of the user who created
        the project site visit record. This field is used to track ownership and facilitate
        accountability within the
    project_id:
      type: int
      description: The 'project_id' field is an integer that uniquely identifies a
        project associated with the record in the 'project_projectsitevisit' table.
        It serves as a foreign key linking to the corresponding project in the projects
        table, facilitating the association between site visits
    site_address_id:
      type: int
      description: The 'site_address_id' field is an integer that serves as a foreign
        key, linking the project site visit to a specific site address in the database.
        It uniquely identifies the location associated with each project site visit
        record.
    user_id:
      type: int
      description: The `user_id` field in the `project_projectsitevisit` table is
        an integer that uniquely identifies the user associated with a specific site
        visit in the project. This field serves as a foreign key to link to the user's
        record in the user table
project_projectsitevisitexpense:
  description: The `project_projectsitevisitexpense` table records expenses associated
    with site visits for specific projects. It captures financial data related to
    on-site activities, including costs incurred for travel, accommodation, and other
    related expenses. Each entry typically contains details such as the
  fields:
    id:
      type: int
      description: "**Field**: id  \n**Type**: int  \n**Description**: This field\
        \ serves as the unique identifier for each record in the 'project_projectsitevisitexpense'\
        \ table, ensuring that each expense entry can be distinctly referenced."
    amount:
      type: double
      description: "**Field:** `amount`  \n**Type:** `double`  \n**Description:**\
        \ Represents the total monetary amount associated with a specific site visit\
        \ expense for a project. This field stores values as decimal numbers, allowing\
        \ for precision in financial calculations related to project"
    bill_document:
      type: varchar(250)
      description: The 'bill_document' field in the 'project_projectsitevisitexpense'
        table is a variable character string with a maximum length of 250 characters.
        It is used to store the filename or reference of the billing document related
        to project site visit expenses.
    type_of_expense:
      type: varchar(10)
      description: The field **type_of_expense** in the **project_projectsitevisitexpense**
        table stores the category of expense associated with a project site visit.
        It is a string field with a maximum length of 10 characters, allowing for
        concise categorization (
    remark:
      type: longtext
      description: The 'remark' field of type 'longtext' in the 'project_projectsitevisitexpense'
        table is used to store detailed notes or comments regarding specific expenses
        related to site visits for a project. This field can accommodate a large amount
        of text,
    project_site_visit_id:
      type: int
      description: "**Field: project_site_visit_id**  \n**Type**: Integer  \n**Description**:\
        \ This field uniquely identifies a specific site visit associated with a project\
        \ in the `project_projectsitevisitexpense` table. It serves as a reference\
        \ to link expenses"
    is_active:
      type: tinyint(1)
      description: '`is_active`: A tiny integer (1) field that indicates whether the
        project site visit expense is currently active. A value of 1 signifies that
        the expense is active, while a value of 0 indicates it is inactive.'
project_projectstagehistory:
  description: The `project_projectstagehistory` table stores historical data related
    to the various stages of a project throughout its lifecycle. Each record captures
    a specific change in the project stage, including timestamps, stage identifiers,
    and relevant metadata to track the progression and modifications in
  fields:
    id:
      type: bigint
      description: The 'id' field in the 'project_projectstagehistory' table is of
        type 'bigint' and serves as the unique identifier for each record in the table.
        It ensures that each entry can be distinctly referenced and is crucial for
        maintaining the integrity
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_projectstagehistory' table
        stores the timestamp of when a record was created, with precision up to six
        decimal places for fractional seconds. It is used to track the time of entry
        for each project stage history
    updated_at:
      type: datetime(6)
      description: The `updated_at` field in the `project_projectstagehistory` table
        stores the timestamp of the last update made to a record, capturing the date
        and time with microsecond precision.
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_projectstagehistory' table
        is a tiny integer that indicates the active status of a project stage. A value
        of 1 denotes that the stage is currently active, while a value of 0 indicates
        that
    stage:
      type: varchar(50)
      description: The 'stage' field in the 'project_projectstagehistory' table is
        a VARCHAR field with a maximum length of 50 characters. It is used to store
        the current phase or status of a project at a specific point in its history,
        indicating the
    created_by_id:
      type: int
      description: "**Field:** `created_by_id`  \n**Type:** `int`  \n**Description:**\
        \ This field stores the unique identifier (ID) of the user who created the\
        \ record in the `project_projectstagehistory` table. It links to the user"
    project_id:
      type: bigint
      description: The 'project_id' field in the 'project_projectstagehistory' table
        is a bigint data type that uniquely identifies the project associated with
        a specific stage in its history. This field serves as a foreign key, linking
        the project stage history records to their
project_projecttask:
  description: The `project_projecttask` table stores information about tasks associated
    with various projects. Each record in the table represents a specific task, detailing
    attributes such as the task's name, description, assigned team members, status,
    priority level, deadlines, and the
  fields:
    id:
      type: int
      description: The 'id' field in the 'project_projecttask' table is an integer
        that uniquely identifies each project task record. It serves as the primary
        key for the table, ensuring each task can be distinctly referenced.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_projecttask' table records
        the precise date and time when the project task was created. It uses the 'datetime(6)'
        data type to include fractional seconds, allowing for high-resolution time
        stamps.
    updated_at:
      type: datetime(6)
      description: "**Field:** `updated_at`  \n**Type:** `datetime(6)`  \n**Table:**\
        \ `project_projecttask`  \n\n**Description:** Records the date and time when\
        \ the project task was last updated, with precision up to microseconds."
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_projecttask' table is a tiny
        integer (1) that indicates the active status of a project task. A value of
        1 represents that the task is currently active, while a value of 0
    task_name:
      type: varchar(250)
      description: The field 'task_name' in the 'project_projecttask' table stores
        the name of a specific task associated with a project. It is of type 'varchar(250)',
        allowing for a variable-length string up to 250 characters. This field is
    planned_start_date:
      type: date
      description: The 'planned_start_date' field in the 'project_projecttask' table
        represents the scheduled date when a specific project task is intended to
        commence. It helps in tracking the timeline and planning of project milestones.
    actual_end_date:
      type: date
      description: The field 'actual_end_date' in the 'project_projecttask' table
        represents the date when a project task was completed. It is used to track
        the actual completion date of the task, helping to compare planned versus
        actual timelines.
    is_milestone:
      type: tinyint(1)
      description: The field 'is_milestone' in the 'project_projecttask' table is
        a tinyint(1) that indicates whether a specific project task is a milestone.
        A value of '1' signifies that the task is a milestone, while a
    assigned_to_id:
      type: int
      description: The `assigned_to_id` field in the `project_projecttask` table is
        an integer that represents the unique identifier of the user to whom the project
        task is assigned. This field links the task to a specific team member, facilitating
        task management and ownership
    created_by_id:
      type: int
      description: The 'created_by_id' field in the 'project_projecttask' table is
        an integer that identifies the user who created the project task. This field
        references the user's unique identifier in the user management system, allowing
        for tracking of task ownership and accountability.
    header_id:
      type: int
      description: The `header_id` field in the `project_projecttask` table is an
        integer that uniquely identifies the associated project header for each project
        task. It serves as a foreign key linking the task to its respective project,
        facilitating the organization and management of tasks
    actual_start_date:
      type: date
      description: "**Field:** `actual_start_date`  \n**Type:** `date`  \n**Description:**\
        \ This field represents the actual date on which a project task began. It\
        \ is used to track the real start date of the task for record-keeping and\
        \ project"
    planned_end_date:
      type: date
      description: "**Field**: `planned_end_date`  \n**Type**: Date  \n**Description**:\
        \ Represents the anticipated completion date for a specific task within a\
        \ project. This field is used to track the timeline and manage project scheduling\
        \ effectively."
    weightage:
      type: double
      description: The 'weightage' field in the 'project_projecttask' table is of
        type 'double' and represents the relative importance or contribution of a
        specific project task within a project. This value is used to assess the task's
        significance in relation to other
    sub_header_id:
      type: int
      description: '`sub_header_id`: An integer field in the `project_projecttask`
        table that uniquely identifies a sub-header associated with a specific project
        task. This field is used to establish relationships between tasks and their
        corresponding sub-headers for better organization and categorization'
    linked_task_sr_no:
      type: int
      description: "**Field: linked_task_sr_no**  \n**Type:** int  \n**Description:**\
        \ This field stores the sequential number (serial number) of a linked task\
        \ related to a project task in the 'project_projecttask' table. It is used\
        \ to identify"
project_purchaser:
  description: The `project_purchaser` table stores information about individuals
    or entities responsible for purchasing projects within the organization. It includes
    details such as purchaser ID, project ID, name, contact information, and the date
    of purchase. This table helps track project acquisitions
  fields:
    id:
      type: bigint
      description: The 'id' field in the 'project_purchaser' table is a unique identifier
        of type 'bigint' that serves as the primary key for each record. It ensures
        that each purchaser entry can be distinctly referenced and managed within
        the database.
    name:
      type: varchar(100)
      description: "**Field Name:** name  \n**Type:** varchar(100)  \n**Table:** project_purchaser\
        \  \n**Description:** This field stores the name of the purchaser associated\
        \ with a project, allowing for a maximum of 100 characters."
    address:
      type: longtext
      description: Field 'address' in the 'project_purchaser' table stores the full
        address of the purchaser as a long text string. This field can accommodate
        extensive address details, including street, city, state, and postal code,
        allowing for comprehensive location information
    pincode:
      type: varchar(10)
      description: The 'pincode' field in the 'project_purchaser' table stores a postal
        code, represented as a variable character string with a maximum length of
        10 characters. It is used to identify the geographic area for the purchaser's
        address.
    gst:
      type: varchar(16)
      description: The 'gst' field in the 'project_purchaser' table stores the Goods
        and Services Tax identification number as a string, with a maximum length
        of 16 characters. This field is used to identify the purchaser's GST registration
        for tax purposes.
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_purchaser' table is a tiny
        integer (1) that indicates the active status of a purchaser. A value of 1
        represents that the purchaser is currently active, while a value of 0
    city_id:
      type: int
      description: The field 'city_id' in the 'project_purchaser' table is of type
        'int' and stores the unique identifier for the city associated with the purchaser.
        This field is used to link the purchaser to a specific city, allowing for
        geographical
    state_id:
      type: int
      description: The 'state_id' field in the 'project_purchaser' table is an integer
        that uniquely identifies the state associated with a purchaser. It serves
        as a foreign key linking to a states reference table, allowing for the categorization
        of purchasers by their
project_sitedetails:
  description: The `project_sitedetails` table stores specific information about various
    project sites. It includes fields that capture the location, size, type, and other
    relevant attributes of each site associated with a project. This data supports
    project management and planning by providing essential
  fields:
    id:
      type: bigint
      description: The 'id' field in the 'project_sitedetails' table is of type 'bigint'
        and serves as a unique identifier for each record in the table. It is typically
        used as the primary key to ensure the uniqueness of site detail entries
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_sitedetails' table stores
        the date and time when a record was created, with a precision of up to 6 fractional
        seconds. This field helps track the creation timestamp for project site details.
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_sitedetails' table records
        the date and time when the site details were last updated. It is stored in
        datetime format with precision up to microseconds (6).
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_sitedetails' table is a tiny
        integer (1) that indicates the active status of a project site. A value of
        1 signifies that the site is currently active, while a value of
    name:
      type: varchar(150)
      description: The 'name' field in the 'project_sitedetails' table is a variable
        character string with a maximum length of 150 characters. It is used to store
        the name of the project site for identification and reference purposes.
    location:
      type: varchar(2050)
      description: The 'location' field in the 'project_sitedetails' table is a variable
        character string with a maximum length of 2050 characters. It stores the geographical
        location or address related to the project site, providing detailed contextual
        information for site-specific details
    address:
      type: longtext
      description: The 'address' field in the 'project_sitedetails' table is of type
        'longtext' and is used to store the complete address information related to
        a specific project site. This field can accommodate extensive text input,
        allowing for detailed descriptions of
    pincode:
      type: varchar(10)
      description: The 'pincode' field in the 'project_sitedetails' table is a varchar
        data type with a maximum length of 10 characters. It stores the postal code
        associated with the project's site location, enabling accurate identification
        of the area's mailing address.
    city_id:
      type: int
      description: "**Field:** `city_id`  \n**Type:** `int`  \n**Table:** `project_sitedetails`\
        \  \n**Description:** A numeric identifier that uniquely represents a city\
        \ related to the site details of a project. This field links the project"
    company_id:
      type: int
      description: The 'company_id' field in the 'project_sitedetails' table is an
        integer that uniquely identifies the company associated with the project site.
        It serves as a foreign key to link project site details to the corresponding
        company record in the companies table.
    created_by_id:
      type: int
      description: The field `created_by_id` is an integer that stores the unique
        identifier of the user who created the record in the `project_sitedetails`
        table. It establishes the relationship between the site details and the user
        responsible for its entry.
    state_id:
      type: int
      description: The field 'state_id' is an integer that represents a unique identifier
        for the state associated with a particular site in the 'project_sitedetails'
        table. It is used to link site details to the corresponding state within the
        database.
    gst:
      type: varchar(16)
      description: The field 'gst' in the 'project_sitedetails' table is a VARCHAR(16)
        type that stores the Goods and Services Tax identification number associated
        with the project site. This alphanumeric field can accommodate GST numbers
        up to 16 characters in
    primary_poc_client_name:
      type: varchar(50)
      description: "**Field:** primary_poc_client_name  \n**Type:** varchar(50)  \n\
        **Description:** This field stores the name of the primary point of contact\
        \ for the client associated with the project site, limited to a maximum of\
        \ 50 characters."
    primary_poc_designation:
      type: varchar(30)
      description: The field **primary_poc_designation** stores the designation or
        job title of the primary point of contact for the project site. It is a variable
        character field with a maximum length of 30 characters.
    primary_poc_email:
      type: varchar(254)
      description: The field 'primary_poc_email' in the 'project_sitedetails' table
        stores the email address of the primary point of contact for the project.
        It is of type 'varchar(254)', allowing for a maximum length of 254 characters,
    primary_poc_phone:
      type: varchar(16)
      description: The field 'primary_poc_phone' in the 'project_sitedetails' table
        stores the primary point of contact's phone number as a variable character
        string, allowing for up to 16 characters. This field is used to facilitate
        communication with the primary
    gst_doc:
      type: varchar(650)
      description: The field 'gst_doc' in the 'project_sitedetails' table is a VARCHAR(650)
        type that stores the GST (Goods and Services Tax) document information related
        to the project site. It is designed to hold a textual representation of the
    pan:
      type: varchar(16)
      description: Field 'pan' in the 'project_sitedetails' table is a VARCHAR(16)
        that stores the Permanent Account Number (PAN), which is a unique identifier
        assigned to individuals and entities for tax purposes in India. It allows
        for efficient tracking of
    pan_doc:
      type: varchar(650)
      description: Field 'pan_doc' in the 'project_sitedetails' table is a variable
        character string with a maximum length of 650 characters. It is used to store
        the document or identification number related to the Permanent Account Number
        (PAN) for the project
    latitude:
      type: decimal(9,6)
      description: "**Field:** latitude  \n**Type:** decimal(9,6)  \n**Description:**\
        \ Represents the geographic latitude of the project site, with six decimal\
        \ places of precision, allowing for precise location identification within\
        \ a range of approximately \xB10.11 meters."
    longitude:
      type: decimal(9,6)
      description: "**Field:** `longitude`  \n**Type:** `decimal(9,6)`  \n**Description:**\
        \ Represents the geographic longitude of the site location for the project,\
        \ expressed in decimal degrees with a precision of six decimal places. This\
        \ value helps identify the"
    primary_poc_mobile:
      type: varchar(16)
      description: "**Field: primary_poc_mobile**  \n**Type: varchar(16)**  \n**Description:**\
        \ This field stores the mobile phone number of the primary point of contact\
        \ (POC) for the project. It is limited to a maximum of 16"
project_siteengineercheckincheckout:
  description: The `project_siteengineercheckincheckout` table stores records of check-in
    and check-out activities for site engineers associated with various projects.
    Each entry includes timestamps for when a site engineer arrives and departs from
    a project site, along with relevant identifiers
  fields:
    id:
      type: bigint
      description: The 'id' field in the 'project_siteengineercheckincheckout' table
        is a unique identifier of type 'bigint'. This field serves to uniquely distinguish
        each record in the table, ensuring that all check-in and check-out entries
        for site
    checkin:
      type: datetime(6)
      description: The 'checkin' field in the 'project_siteengineercheckincheckout'
        table stores the date and time of when a site engineer checks in to a project
        site. This field is of type 'datetime(6)', allowing for precise timestamps
        with
    checkout:
      type: datetime(6)
      description: The 'checkout' field in the 'project_siteengineercheckincheckout'
        table records the date and time (with microsecond precision) when a site engineer
        completes their checkout from a project site.
    checkin_longitude:
      type: varchar(30)
      description: The field 'checkin_longitude' in the 'project_siteengineercheckincheckout'
        table stores the longitude coordinate as a string (up to 30 characters) representing
        the geographic location where a site engineer checks in.
    checkin_latitude:
      type: varchar(30)
      description: The field 'checkin_latitude' stores the latitude coordinate of
        the site engineer's check-in location as a string, with a maximum length of
        30 characters.
    checkout_longitude:
      type: varchar(30)
      description: The field 'checkout_longitude' in the 'project_siteengineercheckincheckout'
        table stores the longitude coordinate of the location where a site engineer
        checks out, represented as a string with a maximum length of 30 characters.
    checkout_latitude:
      type: varchar(30)
      description: The field 'checkout_latitude' in the table 'project_siteengineercheckincheckout'
        stores the latitude coordinate as a VARCHAR(30) string. This data field is
        used to record the geographical latitude of the location where the site engineer
        checks out
    user_id:
      type: int
      description: The 'user_id' field is an integer that uniquely identifies the
        user associated with a specific check-in or check-out record in the 'project_siteengineercheckincheckout'
        table.
project_siteinventory:
  description: The `project_siteinventory` table stores information related to the
    inventory of materials and resources available at various project sites. It includes
    details such as item descriptions, quantities, locations, and associated project
    IDs to facilitate efficient inventory management and tracking across multiple
    sites.
  fields:
    id:
      type: bigint
      description: The 'id' field in the 'project_siteinventory' table is of type
        'bigint' and serves as the primary identifier for each record in the table.
        It ensures uniqueness and is typically used to reference specific site inventory
        entries in related operations and
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_siteinventory' table stores
        the date and time when the record was created, with precision up to microseconds
        (datetime(6)). This field is used for tracking the creation timestamp of inventory
        entries.
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_siteinventory' table records
        the timestamp indicating the last time the record was modified. It is stored
        as a datetime value with microsecond precision (up to six decimal places).
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_siteinventory' table is a
        tiny integer that indicates the active status of a site inventory record.
        A value of 1 signifies that the record is currently active, while a value
        of 0 indicates that
    quantity:
      type: double
      description: The 'quantity' field in the 'project_siteinventory' table represents
        the numeric amount of items available or stored at a specific project site,
        recorded as a double-precision floating-point value to allow for precise measurements.
    created_by_id:
      type: int
      description: "**Field Name:** created_by_id  \n**Type:** int  \n**Description:**\
        \ This field stores the unique identifier (ID) of the user who created the\
        \ record in the 'project_siteinventory' table, linking it to the corresponding\
        \ user entry in the"
    items_id:
      type: bigint
      description: The field 'items_id' in the 'project_siteinventory' table is of
        type 'bigint' and serves as a unique identifier for each item in the inventory.
        It is used to link specific inventory items to records, ensuring efficient
        tracking and management
    project_site_id:
      type: bigint
      description: "**Field**: `project_site_id`  \n**Type**: `bigint`  \n**Description**:\
        \ Unique identifier for each project site in the project site inventory. This\
        \ field serves as a primary key, linking project site records to related data"
    unit_id:
      type: bigint
      description: The field 'unit_id' in the 'project_siteinventory' table is of
        type 'bigint' and serves as a unique identifier for each unit within the site
        inventory. This value is used to associate specific inventory items with their
        corresponding units for tracking
    merged_into_id:
      type: bigint
      description: The 'merged_into_id' field in the 'project_siteinventory' table
        is a bigint type that stores the unique identifier of another record in the
        same table, indicating that the current record has been merged into it. This
        field is used to track relationships
project_siteinventoryitemtransaction:
  description: database table named 'project_siteinventoryitemtransaction' (auto-generated
    description)
  fields:
    id:
      type: bigint
      description: The field 'id' in the table 'project_siteinventoryitemtransaction'
        is a unique identifier of type 'bigint' for each record in the table. It serves
        as the primary key and ensures the uniqueness of inventory item transaction
        entries associated with a
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_siteinventoryitemtransaction'
        table captures the exact timestamp of when a record was created, down to microsecond
        precision (datetime(6)). This field is essential for tracking the creation
        date and time of inventory
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_siteinventoryitemtransaction'
        table is a datetime(6) field that records the precise date and time when a
        record was last modified. This field includes microsecond precision, allowing
        for detailed tracking of updates
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_siteinventoryitemtransaction'
        table is a tiny integer (1) that indicates the active status of a transaction.
        A value of 1 signifies that the transaction is currently active, while a value
        of
    quantity:
      type: double
      description: "**Field: quantity**  \n**Type: double**  \n**Table: project_siteinventoryitemtransaction**\
        \  \n**Description:** Represents the numerical amount of the inventory item\
        \ involved in the transaction, allowing for fractional quantities. This field\
        \ tracks the quantity being added"
    product_code:
      type: varchar(50)
      description: The 'product_code' field in the 'project_siteinventoryitemtransaction'
        table is a variable character string with a maximum length of 50 characters.
        It uniquely identifies each product involved in the inventory item transaction,
        facilitating accurate tracking and management of inventory items
    transaction_type:
      type: varchar(50)
      description: The 'transaction_type' field in the 'project_siteinventoryitemtransaction'
        table is a varchar (50) string that categorizes the nature of the transaction,
        such as 'purchase', 'sale', 'return', or 'transfer'. This field provides
    remark:
      type: longtext
      description: The 'remark' field in the 'project_siteinventoryitemtransaction'
        table is a longtext datatype that is used to store detailed comments or notes
        related to a specific inventory item transaction. This field allows for lengthy
        text entries to provide additional context or information
    created_by_id:
      type: int
      description: The field 'created_by_id' is an integer that stores the identifier
        of the user who created the record in the 'project_siteinventoryitemtransaction'
        table. This field is used to track the creator of each transaction item for
        auditing and accountability purposes.
    invoice_item_id:
      type: bigint
      description: The field **'invoice_item_id'** in the **'project_siteinventoryitemtransaction'**
        table is of type **'bigint'** and serves as a unique identifier for each invoice
        item associated with a transaction. This field links the transaction
    site_inventory_transaction_id:
      type: bigint
      description: "**Field:** `site_inventory_transaction_id`  \n**Type:** `bigint`\
        \  \n**Description:** Unique identifier for each site inventory transaction\
        \ within the `project_siteinventoryitemtransaction` table. This ID serves\
        \ as the primary key to distinguish individual transactions"
project_siteinventorytransaction:
  description: The `project_siteinventorytransaction` table stores transaction records
    related to inventory movements within various project sites. Each record captures
    details such as the type of transaction (e.g., addition, removal), the quantity
    of items involved, timestamps, and the associated project
  fields:
    id:
      type: bigint
      description: The 'id' field in the 'project_siteinventorytransaction' table
        is a unique identifier of type 'bigint' that serves to uniquely distinguish
        each transaction record within the table.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_siteinventorytransaction'
        table stores the date and time when the inventory transaction record was created.
        It is of type 'datetime(6)', which allows for precision up to six fractional
        seconds.
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_siteinventorytransaction'
        table stores the date and time of the most recent update to a record. This
        field is of type 'datetime(6)', which includes fractions of a second for precise
        timestamping.
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_siteinventorytransaction'
        table is a tinyint(1) data type that indicates the active status of a transaction.
        A value of 1 signifies that the transaction is currently active, while a value
        of
    dispatch_date:
      type: date
      description: "**Field: dispatch_date**  \n**Type: date**  \n**Description:**\
        \ The date when the items were dispatched from the inventory, indicating the\
        \ time of transfer for the project site inventory transaction."
    status:
      type: varchar(50)
      description: The 'status' field in the 'project_siteinventorytransaction' table
        is a varchar(50) data type that stores the current status of a transaction
        related to site inventory. It indicates the transaction's progress or state,
        such as "pending," "
    vehicle_no:
      type: varchar(150)
      description: The field 'vehicle_no' in the table 'project_siteinventorytransaction'
        stores the vehicle identification number or registration number associated
        with a transaction. It is of type 'varchar(150)', allowing for alphanumeric
        characters and accommodating various formats of vehicle numbers.
    vehicle_image_added:
      type: tinyint(1)
      description: The field 'vehicle_image_added' in the 'project_siteinventorytransaction'
        table is a boolean indicator represented as a tiny integer (1 for true, 0
        for false), which specifies whether an image of the vehicle has been added
        to the transaction record
    eway_bill:
      type: varchar(50)
      description: The 'eway_bill' field in the 'project_siteinventorytransaction'
        table is a varchar(50) type that stores the unique identification number associated
        with the electronic waybill for transactions related to site inventory. This
        field allows for the tracking and management of
    eway_bill_document_file:
      type: varchar(250)
      description: The field 'eway_bill_document_file' in the 'project_siteinventorytransaction'
        table stores the file name or path (up to 250 characters) of the e-way bill
        document associated with the inventory transaction.
    lr_no:
      type: varchar(50)
      description: The field 'lr_no' in the 'project_siteinventorytransaction' table
        is a variable character string with a maximum length of 50 characters. It
        typically represents the logistics receipt number associated with the inventory
        transaction, serving as a unique identifier for tracking the
    lr_document_file:
      type: varchar(250)
      description: The field 'lr_document_file' in the 'project_siteinventorytransaction'
        table stores the filename or path of a document associated with a site inventory
        transaction, with a maximum length of 250 characters.
    remark:
      type: longtext
      description: "**Field:** `remark`  \n**Type:** `longtext`  \n**Description:**\
        \ This field stores detailed notes or comments related to the specific transaction\
        \ within the project site inventory. It can accommodate large amounts of text,\
        \ allowing users to provide extensive descriptions"
    created_by_id:
      type: int
      description: The 'created_by_id' field in the 'project_siteinventorytransaction'
        table is an integer that stores the identifier of the user who created the
        transaction record. This field helps in tracking the origin of the record
        for auditing and accountability purposes.
    driver_id:
      type: int
      description: The 'driver_id' field is an integer that uniquely identifies the
        driver associated with a specific transaction in the 'project_siteinventorytransaction'
        table. This field is used to link the transaction to the corresponding driver's
        record in the database.
    invoice_id:
      type: bigint
      description: The field 'invoice_id' in the 'project_siteinventorytransaction'
        table is of type 'bigint' and serves as a unique identifier for each invoice
        associated with inventory transactions. This field links the transaction to
        a specific invoice, enabling tracking and management
project_siteinventorytransactions:
  description: The `project_siteinventorytransactions` table records the transactions
    related to inventory items at various project sites. Each entry captures details
    such as the type of transaction (e.g., addition, removal), the item involved,
    the quantity affected, the site location,
  fields:
    id:
      type: bigint
      description: Field 'id' is a unique identifier of type 'bigint' for each record
        in the 'project_siteinventorytransactions' table. It serves as the primary
        key, ensuring each transaction can be distinctly referenced.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_siteinventorytransactions'
        table stores the timestamp indicating when the record was created. It is of
        type 'datetime(6)', which allows for precise date and time representation
        down to microseconds.
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_siteinventorytransactions'
        table captures the date and time when the record was last updated, with microsecond
        precision. It is used to track changes and maintain version control for inventory
        transactions.
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_siteinventorytransactions'
        table is a tinyint(1) value that indicates the status of a transaction. It
        typically denotes whether the transaction is currently active (1) or inactive
        (0).
    dispatch_date:
      type: date
      description: "**Field:** `dispatch_date`  \n**Type:** `date`  \n**Description:**\
        \ The date on which the inventory items were dispatched from the project site.\
        \ This field records the specific date to track inventory movement and management."
    status:
      type: varchar(50)
      description: The 'status' field in the 'project_siteinventorytransactions' table
        is a VARCHAR(50) data type that indicates the current state of a transaction.
        This field can be used to track various stages of the transaction lifecycle,
        such as 'pending',
    vehicle_no:
      type: varchar(150)
      description: "**Field: vehicle_no**  \n**Type:** varchar(150)  \n**Description:**\
        \ This field stores the vehicle number associated with the inventory transaction\
        \ at a project site. It is a variable character string, allowing for alphanumeric\
        \ vehicle identification up to"
    vehicle_image_added:
      type: tinyint(1)
      description: The 'vehicle_image_added' field in the 'project_siteinventorytransactions'
        table is a boolean indicator (tinyint(1)) that signifies whether an image
        of the vehicle has been added to the transaction record. A value of '1' indicates
        that
    eway_bill:
      type: varchar(50)
      description: The 'eway_bill' field in the 'project_siteinventorytransactions'
        table stores a unique identifier for electronic waybills, represented as a
        variable character string with a maximum length of 50 characters. It is used
        to track and validate the movement of
    eway_bill_document_file:
      type: varchar(250)
      description: "**Field Name:** eway_bill_document_file  \n**Type:** varchar(250)\
        \  \n**Description:** This field stores the file name or path of the e-way\
        \ bill document associated with a transaction in the site inventory. It is\
        \ limited to 250"
    lr_no:
      type: varchar(50)
      description: The field 'lr_no' in the 'project_siteinventorytransactions' table
        is a VARCHAR data type with a maximum length of 50 characters. It is used
        to store the unique identification number or code associated with a transaction
        related to site inventory, facilitating
    lr_document_file:
      type: varchar(250)
      description: The field 'lr_document_file' in the 'project_siteinventorytransactions'
        table is a VARCHAR data type with a maximum length of 250 characters. It is
        used to store the filename or path of a document related to the site inventory
        transaction, providing
    remark:
      type: longtext
      description: "**Field: remark**  \n**Type: longtext**  \n**Description:** This\
        \ field stores additional notes or comments related to specific transactions\
        \ within the project site inventory. It can accommodate lengthy text entries,\
        \ allowing users to provide detailed information or context about the"
    created_by_id:
      type: int
      description: "**Field: created_by_id**  \n**Type: int**  \n**Description:**\
        \ This field stores the unique identifier of the user who created the record\
        \ in the 'project_siteinventorytransactions' table. It references the user\
        \ record responsible for initiating the transaction"
    driver_id:
      type: int
      description: The 'driver_id' field in the 'project_siteinventorytransactions'
        table is an integer that uniquely identifies the driver associated with a
        specific inventory transaction. This field links each transaction to the corresponding
        driver's record, enabling tracking of inventory movement and management based
        on
    invoice_id:
      type: bigint
      description: The 'invoice_id' field in the 'project_siteinventorytransactions'
        table is a bigint data type that uniquely identifies each invoice associated
        with a specific inventory transaction. This field serves as a reference for
        linking transactions to their corresponding invoices, facilitating financial
        tracking and
    transporter_id:
      type: int
      description: "Field Name: `transporter_id`  \nType: `int`  \nDescription: This\
        \ field stores a unique identifier for the transporter associated with the\
        \ inventory transaction at the project site. It establishes a link between\
        \ the transaction and the relevant transporter in the database"
project_unit:
  description: The `project_unit` table stores information related to specific units
    or components within a project. Each record typically includes details such as
    the unit's identifier, description, status, associated project ID, and relevant
    timestamps for tracking progress and updates. This table helps
  fields:
    id:
      type: bigint
      description: The 'id' field in the 'project_unit' table is a unique identifier
        of type 'bigint'. It serves as the primary key for the table, ensuring each
        record can be distinctly referenced and facilitating data integrity.
    symbol:
      type: varchar(10)
      description: The 'symbol' field in the 'project_unit' table is a variable character
        string with a maximum length of 10 characters. It uniquely identifies a specific
        project unit, often representing a shorthand or abbreviation associated with
        the project.
    name:
      type: varchar(40)
      description: The 'name' field in the 'project_unit' table is a variable character
        string with a maximum length of 40 characters. It is designed to store the
        name of the project unit, which may include alphanumeric characters and special
        symbols, providing a
    type:
      type: varchar(20)
      description: The 'type' field in the 'project_unit' table is a varchar(20) data
        type that stores a classification or category designation for the project
        unit. This field can contain a string of up to 20 characters, allowing for
        the identification of
    is_base_unit_smaller:
      type: tinyint(1)
      description: The field 'is_base_unit_smaller' in the 'project_unit' table is
        a tiny integer (1 byte) that indicates whether the base unit is smaller than
        the related unit. A value of 1 typically represents 'true' (the base
    base_conversion_factor:
      type: int
      description: The 'base_conversion_factor' field in the 'project_unit' table
        is an integer value that represents the factor used to convert between different
        units of measurement within a project. This field is essential for ensuring
        accurate calculations and conversions when handling various units in the
    base_unit_id:
      type: bigint
      description: The 'base_unit_id' field of type 'bigint' in the 'project_unit'
        table uniquely identifies the base unit associated with a specific project
        unit. It serves as a foreign key to link to the primary key of the base unit,
        facilitating
project_userrolemapping:
  description: The `project_userrolemapping` table establishes a relationship between
    users and their assigned roles within various projects. It typically includes
    fields such as user ID, project ID, and role ID, allowing for efficient management
    of user permissions and responsibilities within specific projects
  fields:
    id:
      type: int
      description: 'Field ''id'': An integer that serves as the unique identifier
        for each record in the ''project_userrolemapping'' table, ensuring that each
        mapping between a user and their role in a project can be distinctly referenced.'
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_userrolemapping' table is
        a datetime(6) type that records the precise timestamp when a user role mapping
        entry was created. The precision of six decimal places allows for millisecond
        accuracy, enabling
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_userrolemapping' table records
        the date and time of the last update made to the user role mapping entry.
        It is stored in 'datetime' format with a precision of up to 6 decimal
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_userrolemapping' table is
        a tinyint(1) data type that indicates whether a specific user-role mapping
        is currently active. A value of '1' signifies that the mapping is active,
    created_by_id:
      type: int
      description: The field 'created_by_id' in the 'project_userrolemapping' table
        represents the unique identifier (ID) of the user who created the record.
        This field is of type 'int' and is used to track the originator of the
    role_id:
      type: int
      description: The 'role_id' field in the 'project_userrolemapping' table is an
        integer that uniquely identifies the role assigned to a user within a specific
        project. This ID corresponds to entries in a roles table, defining the permissions
        and responsibilities associated with
    user_id:
      type: int
      description: The 'user_id' field in the 'project_userrolemapping' table is an
        integer that uniquely identifies a user in the system. It serves as a foreign
        key, linking the user's role and permissions within a specific project context.
project_vendor:
  description: The `project_vendor` table stores the relationship between projects
    and their associated vendors. It includes fields that link specific projects with
    the vendors providing services or products, enabling effective management and
    tracking of vendor contributions to various projects.
  fields:
    id:
      type: bigint
      description: The 'id' field in the 'project_vendor' table is a unique identifier
        of type 'bigint' assigned to each vendor record. It serves as the primary
        key for the table, ensuring that each entry can be distinctly identified and
        referenced.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_vendor' table stores the
        timestamp of when the record was created. It is of type 'datetime(6)', allowing
        for precise date and time values with up to six digits of fractional seconds.
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_vendor' table stores the
        timestamp of the last update made to a record, with a precision of up to 6
        microseconds. It is used to track when changes were applied, helping maintain
        data integrity
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_vendor' table is a tiny integer
        (1) that indicates the active status of a vendor associated with a project.
        A value of '1' signifies that the vendor is currently active, while a value
    name:
      type: varchar(150)
      description: The 'name' field in the 'project_vendor' table is a variable character
        string with a maximum length of 150 characters. It is used to store the name
        of the vendor associated with a specific project.
    contact_person_name:
      type: varchar(150)
      description: "**Field: contact_person_name**  \n**Type:** varchar(150)  \n**Description:**\
        \ This field stores the name of the primary contact person associated with\
        \ a vendor for a specific project. It can contain up to 150 characters."
    contact_no:
      type: varchar(150)
      description: The 'contact_no' field in the 'project_vendor' table stores the
        contact number of the vendor as a variable character string, with a maximum
        length of 150 characters. This field is used to facilitate communication with
        the vendor.
    email:
      type: varchar(150)
      description: "**Field:** email  \n**Type:** varchar(150)  \n**Table:** project_vendor\
        \  \n\n**Description:** This field stores the email address of the vendor\
        \ associated with a project. It can hold up to 150 characters and is used\
        \ for communication and"
    address:
      type: varchar(150)
      description: The 'address' field in the 'project_vendor' table is a variable
        character string that can store up to 150 characters. It is used to record
        the physical address of the vendor associated with a project.
    pincode:
      type: varchar(10)
      description: The 'pincode' field in the 'project_vendor' table is a varchar(10)
        type that stores the postal code associated with a vendor's address. It can
        hold alphanumeric characters and is used for identifying specific geographic
        areas for mailing purposes.
    gst:
      type: varchar(20)
      description: The 'gst' field in the 'project_vendor' table is a varchar data
        type with a maximum length of 20 characters. It stores the Goods and Services
        Tax (GST) identification number for the vendor, serving as a unique identifier
        for tax purposes
    city_id:
      type: int
      description: "**Field:** city_id  \n**Type:** int  \n**Description:** This field\
        \ stores the unique identifier for the city associated with the vendor in\
        \ the project_vendor table. It is used to establish a relationship between\
        \ the vendor and the corresponding city in the database"
    created_by_id:
      type: int
      description: The `created_by_id` field in the `project_vendor` table is an integer
        that stores the unique identifier of the user who created the project vendor
        record. This field helps to track the origin of the entry and maintains a
        reference to the creator for
    state_id:
      type: int
      description: "**Field: state_id**  \n**Type:** int  \n**Description:** This\
        \ field stores the unique identifier for the state associated with a project\
        \ vendor. It references the corresponding entry in a states table, facilitating\
        \ the categorization of vendors by their geographical location"
    vendor_code:
      type: varchar(150)
      description: The 'vendor_code' field in the 'project_vendor' table is a string
        field (varchar) that holds a unique identifier for each vendor, with a maximum
        length of 150 characters. This code is used to differentiate vendors and may
        be referenced in
project_vendorpurchaseorder:
  description: The `project_vendorpurchaseorder` table stores information related
    to purchase orders issued to vendors for specific projects. It typically includes
    fields such as order IDs, vendor details, project IDs, order dates, item descriptions,
    quantities, prices, and status of the
  fields:
    id:
      type: bigint
      description: The 'id' field in the 'project_vendorpurchaseorder' table is of
        type 'bigint' and serves as the unique identifier for each vendor purchase
        order record. It ensures that every entry can be distinctly referenced and
        managed within the database.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_vendorpurchaseorder' table
        records the exact date and time when a purchase order entry was created. It
        is stored as a datetime value with microsecond precision (datetime(6)).
    updated_at:
      type: datetime(6)
      description: The `updated_at` field in the `project_vendorpurchaseorder` table
        records the date and time when a vendor purchase order was last updated. It
        is stored in the `datetime(6)` format, allowing for precision up to six decimal
        places for
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_vendorpurchaseorder' table
        is a tiny integer (1) that indicates the active status of a purchase order.
        A value of 1 typically represents that the purchase order is active, while
        a value of
    purchase_order_number:
      type: varchar(30)
      description: The 'purchase_order_number' field in the 'project_vendorpurchaseorder'
        table is a variable character (varchar) type with a maximum length of 30 characters.
        It stores the unique identifier for each purchase order associated with vendor
        transactions in the project.
    purchase_order_date:
      type: date
      description: The field **'purchase_order_date'** in the **'project_vendorpurchaseorder'**
        table represents the date on which a purchase order was created or issued.
        It is of type 'date' and is used to track the timeline of vendor transactions
    total_po_amount:
      type: double
      description: The field 'total_po_amount' is of type double in the 'project_vendorpurchaseorder'
        table. It represents the total monetary value of the purchase order associated
        with a specific project and vendor, allowing for precise calculations and
        reporting of procurement costs.
    payment_terms:
      type: longtext
      description: The field **'payment_terms'** in the **'project_vendorpurchaseorder'**
        table is a long text field that stores detailed information regarding the
        payment conditions and requirements associated with a vendor purchase order.
        This may include terms related to payment schedules,
    delivery_terms:
      type: longtext
      description: The 'delivery_terms' field in the 'project_vendorpurchaseorder'
        table is a longtext type field that stores detailed information regarding
        the delivery conditions and requirements associated with a vendor purchase
        order. It may include terms of delivery, shipping instructions, timelines,
    remark:
      type: longtext
      description: "**Field: remark**  \n**Type: longtext**  \n**Description:** This\
        \ field stores additional comments or notes related to the vendor purchase\
        \ order. It can hold extensive textual information, allowing users to provide\
        \ detailed remarks or insights about the purchase order specifics"
    created_by_id:
      type: int
      description: The `created_by_id` field is an integer that stores the unique
        identifier of the user or system that created the specific vendor purchase
        order in the `project_vendorpurchaseorder` table. This field is used for tracking
        and auditing purposes, ensuring accountability in
    project_id:
      type: int
      description: '`project_id` (int): A unique identifier for the project associated
        with the vendor purchase order, linking the purchase order to a specific project
        within the system.'
    vendor_id:
      type: int
      description: "**Field: vendor_id**  \n**Type:** int  \n**Description:** A unique\
        \ identifier for the vendor associated with a purchase order. This integer\
        \ field links to the corresponding vendor in the vendor table, enabling the\
        \ system to reference vendor details related to each"
    billing_address_id:
      type: int
      description: The 'billing_address_id' field is an integer that serves as a foreign
        key, linking to the unique identifier of the billing address associated with
        a specific vendor purchase order in the 'project_vendorpurchaseorder' table.
    revision_number:
      type: int
      description: "**Field: revision_number**  \n**Type: int**  \n**Description:**\
        \ This field stores the numerical representation of the revision version for\
        \ a vendor purchase order in the project. It is used to track and manage changes\
        \ made to the purchase order over time"
    status:
      type: varchar(50)
      description: The 'status' field in the 'project_vendorpurchaseorder' table is
        a VARCHAR(50) data type that indicates the current state of the vendor purchase
        order. Possible values might include statuses such as 'Pending', 'Approved',
        'Cancelled', or
    total_po_tax_amount:
      type: double
      description: "**Field Name:** total_po_tax_amount  \n**Type:** double  \n**Description:**\
        \ This field represents the total amount of taxes applied to the purchase\
        \ order for the associated project, expressed as a double precision floating-point\
        \ number."
    total_po_taxable_amount:
      type: double
      description: The field 'total_po_taxable_amount' in the 'project_vendorpurchaseorder'
        table represents the total amount of the purchase order that is subject to
        taxation. It is stored as a double to accommodate decimal values, allowing
        for greater precision in financial calculations
    other_terms:
      type: longtext
      description: The 'other_terms' field in the 'project_vendorpurchaseorder' table
        is of type 'longtext' and is used to store additional terms and conditions
        related to the vendor purchase order. This field allows for the inclusion
        of any supplementary information that may
    shipping_address_id:
      type: bigint
      description: "**Field:** `shipping_address_id`  \n**Type:** `bigint`  \n**Description:**\
        \ This field stores the unique identifier for the shipping address associated\
        \ with a vendor purchase order in the `project_vendorpurchaseorder` table.\
        \ It links to the"
    shipper_address:
      type: longtext
      description: The 'shipper_address' field in the 'project_vendorpurchaseorder'
        table stores the complete shipping address of the vendor for the purchase
        order. It is of type 'longtext' to accommodate addresses of varying lengths,
        including street address, city,
    shipper_city_id:
      type: int
      description: The 'shipper_city_id' field is an integer that represents the unique
        identifier for the city of the shipper associated with a purchase order in
        the 'project_vendorpurchaseorder' table. This field is used to link the purchase
        order to the specific
    shipper_pincode:
      type: varchar(10)
      description: The field 'shipper_pincode' in the 'project_vendorpurchaseorder'
        table stores the postal code (PIN code) associated with the shipper's address.
        It is a variable character field with a maximum length of 10 characters.
    shipper_contact_person_name:
      type: varchar(100)
      description: "**Field Name:** shipper_contact_person_name  \n**Type:** varchar(100)\
        \  \n**Description:** This field stores the name of the contact person at\
        \ the shipping company associated with the purchase order. It can hold a maximum\
        \ of 100 characters."
    shipper_email:
      type: varchar(100)
      description: "**Field Name:** shipper_email  \n**Type:** varchar(100)  \n**Description:**\
        \ This field stores the email address of the shipper associated with the vendor\
        \ purchase order. It allows for up to 100 characters and is used for communication\
        \ regarding"
    shipper_mobile_no:
      type: varchar(100)
      description: "**Field:** `shipper_mobile_no`  \n**Type:** `varchar(100)`  \n\
        **Description:** This field stores the mobile phone number of the shipper\
        \ associated with a vendor purchase order. The number can contain up to 100\
        \ characters,"
    shipper_name:
      type: varchar(100)
      description: The field `shipper_name` in the table `project_vendorpurchaseorder`
        stores the name of the shipping company or individual responsible for delivering
        the goods. It is a variable character field with a maximum length of 100 characters.
    shipper_state_id:
      type: int
      description: "Field: `shipper_state_id`  \nType: `int`  \nDescription: Represents\
        \ the unique identifier for the state associated with the shipper in the vendor\
        \ purchase order. This field links to a reference table containing state information."
    purchaser_id:
      type: bigint
      description: The field 'purchaser_id' in the 'project_vendorpurchaseorder' table
        is of type 'bigint' and stores the unique identifier for the purchaser associated
        with a specific vendor purchase order. This field links the purchase order
        to a specific individual
    shipper_gst:
      type: varchar(15)
      description: "**Field:** `shipper_gst`  \n**Type:** `varchar(15)`  \n**Description:**\
        \ This field stores the Goods and Services Tax (GST) identification number\
        \ of the shipper associated with the vendor purchase order. It can hold up"
    history:
      type: json
      description: The 'history' field in the 'project_vendorpurchaseorder' table
        is of type 'json' and is used to store a structured record of changes and
        updates made to the vendor purchase order. This field may include information
        such as status changes, timestamps
project_vendorpurchaseorderextracharges:
  description: The `project_vendorpurchaseorderextracharges` table stores additional
    charges associated with vendor purchase orders within various projects. It captures
    details such as the order ID, charge type, amount, and any relevant notes, allowing
    for comprehensive tracking and management of extra
  fields:
    id:
      type: bigint
      description: The 'id' field in the 'project_vendorpurchaseorderextracharges'
        table is a unique identifier of type 'bigint'. It serves as the primary key
        for the table, ensuring that each record can be uniquely distinguished from
        others.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_vendorpurchaseorderextracharges'
        table is a datetime(6) data type that records the precise date and time when
        a record was created. It includes up to six digits of fractional seconds for
        enhanced
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_vendorpurchaseorderextracharges'
        table records the date and time of the last update made to a specific record.
        It is stored in 'datetime(6)' format, allowing for precision up to micro
    is_active:
      type: tinyint(1)
      description: The `is_active` field in the `project_vendorpurchaseorderextracharges`
        table is a tiny integer (1) that indicates the active status of the extra
        charges. A value of `1` signifies that the charge is currently active, while
    amount:
      type: double
      description: The 'amount' field in the 'project_vendorpurchaseorderextracharges'
        table stores the monetary value (as a double) associated with extra charges
        related to vendor purchase orders. This field represents the additional costs
        incurred beyond the initial purchase order amount.
    tax_rate:
      type: double
      description: 'Field `tax_rate`: A double-precision floating-point value representing
        the applicable tax rate for extra charges associated with vendor purchase
        orders. This field determines the percentage of tax to be applied to the total
        cost of extra charges.'
    tax_amount:
      type: double
      description: The 'tax_amount' field in the 'project_vendorpurchaseorderextracharges'
        table represents the monetary amount of tax applied to extra charges associated
        with vendor purchase orders. This value is stored as a double-precision floating-point
        number, allowing for accurate
    total_amount:
      type: double
      description: "Field: **total_amount**  \nType: **double**  \nDescription: Represents\
        \ the total monetary amount for extra charges associated with a vendor purchase\
        \ order in the project, allowing for precise financial calculations and reporting."
    description:
      type: longtext
      description: The 'description' field in the 'project_vendorpurchaseorderextracharges'
        table is of type 'longtext' and is designed to hold detailed textual information
        about additional charges related to vendor purchase orders. This may include
        explanations of the charges, just
    charges_id:
      type: bigint
      description: The field 'charges_id' is a bigint that uniquely identifies each
        extra charge associated with a vendor purchase order in the 'project_vendorpurchaseorderextracharges'
        table.
    created_by_id:
      type: int
      description: The field `created_by_id` is an integer that stores the identifier
        of the user or system account that created the record in the `project_vendorpurchaseorderextracharges`
        table. This field is used for tracking the origin of the entry for auditing
    vendor_purchase_order_id:
      type: bigint
      description: "**Field:** `vendor_purchase_order_id`  \n**Type:** `bigint`  \n\
        **Description:** This field represents the unique identifier for vendor purchase\
        \ orders in the `project_vendorpurchaseorderextracharges` table. It links\
        \ to the corresponding vendor"
project_vendorpurchaseorderproduct:
  description: The 'project_vendorpurchaseorderproduct' table stores information about
    products associated with vendor purchase orders within a project. Each record
    links a specific product to its corresponding purchase order and vendor, including
    details such as quantities, prices, and product identifiers, facilitating efficient
  fields:
    id:
      type: int
      description: The 'id' field in the 'project_vendorpurchaseorderproduct' table
        is an integer that serves as the unique identifier for each record in the
        table, ensuring that each purchase order product entry can be distinctly referenced.
    created_at:
      type: datetime(6)
      description: The 'created_at' field in the 'project_vendorpurchaseorderproduct'
        table records the exact date and time when a purchase order product entry
        was created. It is stored as a datetime value with microsecond precision (6).
    updated_at:
      type: datetime(6)
      description: The 'updated_at' field in the 'project_vendorpurchaseorderproduct'
        table is a datetime(6) data type that stores the timestamp of the last update
        made to the record. It allows for precision up to microseconds, enabling accurate
        tracking of
    is_active:
      type: tinyint(1)
      description: The 'is_active' field in the 'project_vendorpurchaseorderproduct'
        table is a tiny integer (1) that indicates the active status of a vendor purchase
        order product. A value of 1 signifies that the product is active, while a
        value
    quantity:
      type: double
      description: The 'quantity' field in the 'project_vendorpurchaseorderproduct'
        table represents the numeric amount of the specific product that has been
        ordered from the vendor. This field is of type 'double', allowing for precision
        in cases where fractional quantities are applicable.
    unit_price:
      type: double
      description: The 'unit_price' field in the 'project_vendorpurchaseorderproduct'
        table represents the price per unit of an individual product associated with
        a vendor purchase order, stored as a double-precision floating-point number.
        This value is used for calculating total costs
    taxable_amount:
      type: double
      description: The 'taxable_amount' field in the 'project_vendorpurchaseorderproduct'
        table represents the monetary value of goods or services that are subject
        to taxation. It is stored as a double to accommodate decimal values, allowing
        for precise calculations of tax liabilities associated
    tax_rate:
      type: double
      description: The 'tax_rate' field in the 'project_vendorpurchaseorderproduct'
        table represents the applicable tax percentage, expressed as a decimal value,
        that is applied to the total cost of the product in a vendor purchase order.
        This field is used to calculate
    tax_amount:
      type: double
      description: "**Field Name:** tax_amount  \n**Type:** double  \n**Description:**\
        \ This field represents the monetary value of taxes applied to the specific\
        \ product in a vendor purchase order. It captures the total tax calculated\
        \ based on the applicable tax rate for the item purchased"
    total_amount:
      type: double
      description: The 'total_amount' field in the 'project_vendorpurchaseorderproduct'
        table represents the total monetary value of the products included in a vendor
        purchase order. This value is stored as a double, allowing for precision in
        financial calculations involving decimals.
    description:
      type: longtext
      description: The 'description' field in the 'project_vendorpurchaseorderproduct'
        table is a long text field that holds detailed information about the specific
        product included in a vendor purchase order. This can include specifications,
        features, and any relevant notes related to the product
    created_by_id:
      type: int
      description: The field 'created_by_id' in the 'project_vendorpurchaseorderproduct'
        table is an integer that stores the unique identifier of the user who created
        the vendor purchase order product record. This field helps in tracking the
        origin of the entry for accountability and
    unit_id:
      type: int
      description: The field `unit_id` in the `project_vendorpurchaseorderproduct`
        table is an integer that uniquely identifies the unit of measurement or inventory
        unit associated with a specific product in a vendor purchase order. This field
        links the product to its corresponding unit details
    vendor_purchase_order_id:
      type: int
      description: "Field: `vendor_purchase_order_id`  \nType: `int`  \nDescription:\
        \ This field stores the unique identifier for the vendor purchase order associated\
        \ with a specific product in the `project_vendorpurchaseorderproduct` table.\
        \ It links the product details to"
    project_bom_item_id:
      type: int
      description: The field `project_bom_item_id` is of type `int` in the `project_vendorpurchaseorderproduct`
        table. It serves as a unique identifier for items in the Bill of Materials
        (BOM) associated with a specific project, linking
    project_installation_budget_id:
      type: bigint
      description: The field `project_installation_budget_id` is a `bigint` data type
        that represents the unique identifier of the installation budget associated
        with a specific project in the `project_vendorpurchaseorderproduct` table.
        This field links the purchase order product to
    etd:
      type: date
      description: "**Field:** etd  \n**Type:** date  \n**Description:** The estimated\
        \ time of delivery for the purchased order product. This field represents\
        \ the expected date when the product will arrive at its designated location."
    charges:
      type: varchar(100)
      description: The 'charges' field in the 'project_vendorpurchaseorderproduct'
        table is a VARCHAR(100) data type that stores additional cost details or fees
        associated with the vendor purchase order product. It can include charges
        such as shipping, handling, or any
    charges_cost:
      type: double
      description: The 'charges_cost' field in the 'project_vendorpurchaseorderproduct'
        table represents the total cost associated with additional charges for a specific
        vendor purchase order product. It is stored as a double data type to accommodate
        decimal values for precise financial calculations.
    ex_works_unit_price:
      type: double
      description: The field 'ex_works_unit_price' in the 'project_vendorpurchaseorderproduct'
        table represents the unit price of a product, calculated based on Ex Works
        (ExW) terms. It is stored as a double data type to accommodate decimal values
    status:
      type: varchar(25)
      description: The 'status' field in the 'project_vendorpurchaseorderproduct'
        table is a VARCHAR(25) data type that represents the current status of the
        vendor purchase order product. It may hold values indicating various states
        such as 'Pending', 'Completed',
